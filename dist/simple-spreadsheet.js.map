{"version":3,"sources":["webpack://SimpleSpreadsheet/webpack/bootstrap","webpack://SimpleSpreadsheet/./src/environment.js","webpack://SimpleSpreadsheet/./src/evaluator.js","webpack://SimpleSpreadsheet/./src/expressions.js","webpack://SimpleSpreadsheet/./src/parser.js","webpack://SimpleSpreadsheet/./src/spreadsheet.js","webpack://SimpleSpreadsheet/./src/tokenizer.js"],"names":[],"mappings":"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AACA;AACA;AACA;AACA,4CAA4C,oDAAS,OAAO,oDAAS;AACrE,uBAAuB,qDAAQ;AAC/B;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,oDAAS,OAAO,oDAAS;AACjE;AACA,kBAAkB,oDAAO;AACzB;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,oDAAS;AACrC;AACA,0BAA0B,oDAAS;AACnC;AACA;;AAEA;AACA,uCAAuC,oDAAS;AAChD,8BAA8B,YAAY,kDAAK,2BAA2B;;AAE1E;AACA,uCAAuC,oDAAS;AAChD,8BAA8B,YAAY,kDAAK,qDAAqD;;AAEpG,yCAAyC,oDAAS;AAClD;AACA,mDAAmD,oDAAS;AAC5D,gDAAgD,oDAAS;AACzD;AACA;AACA;AACA,0BAA0B,uDAAY,mDAAmD,iBAAiB,GAAG,oBAAoB;AACjI,uBAAuB,kDAAK;AAC5B;;AAEA;AACA,4BAA4B,oDAAS;AACrC;AACA;AACA;AACA,4BAA4B,yDAAY;AACxC,aAAa,wBAAwB,oDAAS;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,uDAAY,sCAAsC,UAAU;AAClF,mBAAmB,sDAAS;AAC5B;;AAEA;AACA;AACA;AACA,gCAAgC,oDAAS;AACzC;AACA,8BAA8B,oDAAS;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,uDAAY,aAAa,KAAK,QAAQ,wBAAwB;AACpF;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,oDAAS;AACzC;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACrJA;AAAA;AAAA;AAA4C;;AAErC;AACP,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,wDAAW;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAO;AACP,0BAA0B,gBAAgB;AAC1C,gBAAgB,yBAAyB,aAAa,EAAE;AACxD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,iDAAiD,eAAe;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,C","file":"simple-spreadsheet.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/spreadsheet.js\");\n","import { Tokenizer, ParsingError } from './tokenizer';\r\nimport Parser from './parser';\r\nimport Evaluator from './evaluator';\r\n\r\nexport class RuntimeError extends Error { constructor(message) { super(message); } }\r\n\r\nexport class Environment {\r\n    constructor(cells = {}, builtinFunctions = {}) {\r\n        this.cells = cells;\r\n        this.functions = builtinFunctions;\r\n        this._parser = new Parser(new Tokenizer());\r\n        this._evaluator = new Evaluator();\r\n    }\r\n\r\n    getText(position) {\r\n        return this.cells[position] === undefined ? \"\" : this.cells[position];\r\n    }\r\n\r\n    getExpression(position) {\r\n        const value = this.cells[position] === undefined ? null : this.cells[position];\r\n        return this._parser.parse(value);\r\n    }\r\n\r\n    getValue(position) {\r\n        return this._evaluator.evaluateCell(this.getExpression(position), this);\r\n    }\r\n\r\n    getFunction(name) {\r\n        if (this.functions[name] === undefined)\r\n            throw new Error(`Unknown function: ${name}`);\r\n        return this.functions[name];\r\n    }\r\n};","import { RuntimeError } from './environment';\r\nimport { Value, Reference, BinaryOp, FunctionCall, Range } from './expressions';\r\n\r\nexport default class Evaluator {\r\n    evaluateCell(cell, environment) {\r\n        switch (cell.constructor) {\r\n            case Value:\r\n                return cell.value;\r\n            case Reference:\r\n                const entry = environment.getExpression(cell.position) || new Value(null);\r\n                return this.evaluateCell(entry, environment);\r\n            case BinaryOp:\r\n                return this.evaluateBinary(cell.left, cell.op, cell.right, environment);\r\n            case FunctionCall:\r\n                return this.evaluateFunction(cell.functionName, cell.args, environment);\r\n            case Range:\r\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\r\n            default:\r\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\r\n        }\r\n    }\r\n\r\n    evaluateExpression(value, environment) {\r\n        switch (value.constructor) {\r\n            case Range: return this.evaluateRange(value.from, value.to, environment);\r\n            default: return this.evaluateCell(value, environment);\r\n        }\r\n    }\r\n\r\n    evaluateBinary(left, op, right, environment) {\r\n        const leftValue = this.evaluateCell(left, environment);\r\n        const rightValue = this.evaluateCell(right, environment);\r\n        switch (op) {\r\n            case '+': return leftValue + rightValue;\r\n            case '-': return leftValue - rightValue;\r\n            case '*': return leftValue * rightValue;\r\n            case '/': return leftValue / rightValue;\r\n            default: throw new RuntimeError(`Unknown binary operator: ${op.type}`);\r\n        }\r\n    }\r\n\r\n    evaluateFunction(functionName, args, environment) {\r\n        const argumentValues = args.map(arg => this.evaluateExpression(arg, environment));\r\n        const func = environment.getFunction(functionName);\r\n        try {\r\n            return func(...argumentValues);\r\n        } catch (ex) {\r\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\r\n        }\r\n    }\r\n\r\n    evaluateRange(from, to, environment) {\r\n        const cells = this._cellsInRange(from, to);\r\n        const cellValues = cells.map(cell => this.evaluateCell(cell, environment));\r\n        return cellValues;\r\n    }\r\n\r\n    _cellsInRange(from, to) {\r\n        if (from.col === to.col)\r\n            return this._range(from.row, to.row)\r\n                .map(row => new Reference(from.col, row));\r\n        else if (from.row === to.row)\r\n            return this._range(from.col.charCodeAt(0), to.col.charCodeAt(0))\r\n                .map(col => new Reference(String.fromCharCode(col), from.row));\r\n        else\r\n            throw new RuntimeError(`Range must be in same row or column. From: ${from}, To: ${to}`);\r\n    }\r\n\r\n    _range(from, to) {\r\n        return from <= to\r\n            ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\r\n            : Array.from({ length: from - to + 1 }, (_, i) => from - i);\r\n    }\r\n}\r\n","export class Expression { }\r\n\r\nexport class Value extends Expression {\r\n    constructor(value) { super(); this.value = value; }\r\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\r\n}\r\n\r\nexport class Reference extends Expression {\r\n    constructor(col, row) { super(); this.col = col; this.row = row; }\r\n    get position() { return `${this.col}${this.row}`; }\r\n    toString() { return `Reference(${this.col}${this.row})`; }\r\n}\r\n\r\nexport class BinaryOp extends Expression {\r\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\r\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\r\n}\r\n\r\nexport class UnaryOp extends Expression {\r\n    constructor(op, value) { super(); this.op = op; this.value = value; }\r\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\r\n}\r\n\r\nexport class FunctionCall extends Expression {\r\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\r\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\r\n}\r\n\r\nexport class Range extends Expression {\r\n    constructor(from, to) { super(); this.from = from; this.to = to; }\r\n    toString() { return `Range(${this.from}, ${this.to})`; }\r\n}","import { ParsingError, TokenType } from './tokenizer';\r\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\r\n\r\nexport default class Parser {\r\n    constructor(tokenizer) {\r\n        this.tokens = tokenizer;\r\n    }\r\n\r\n    parse(text) {\r\n        if (text === null) return new Value(null);\r\n        this.tokens.begin(text);\r\n        const result = this.parseCell();\r\n        return result;\r\n    }\r\n\r\n    // Cell -> Expression | simple value (string or number)\r\n    parseCell() {\r\n        if (this.tokens.remaining.startsWith('=')) {\r\n            this._expectAny(TokenType.EQUALS);\r\n            const result = this.parseExpression();\r\n            this._require(TokenType.EOF);\r\n            return result;\r\n        } else {\r\n            const value = this.tokens.rest();\r\n            if (value.match(/^\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\r\n            else return new Value(value);\r\n        }\r\n    }\r\n\r\n    // Expression -> Factor\r\n    parseExpression() {\r\n        return this.parseTerm();\r\n    }\r\n\r\n    // Term -> Factor ([+-] Factor)*\r\n    parseTerm() {\r\n        let left = this.parseFactor();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseFactor());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Factor -> Unary ([*/] Unary)*\r\n    parseFactor() {\r\n        let left = this.parseUnary();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseUnary());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Unary -> [+-] Unary | Value\r\n    parseUnary() {\r\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\r\n        return operation !== null\r\n            ? new UnaryOp(operation.value, this.parseUnary())\r\n            : this.parseValue();\r\n    }\r\n\r\n    // Value -> Identifier | number | string | ( Expression ) | RangeReference\r\n    parseValue() {\r\n        // Parenthesized expression\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            const contents = this.parseExpression();\r\n            this._require(TokenType.RPAREN);\r\n            return contents;\r\n        }\r\n\r\n        // Number\r\n        const number = this._expectAny(TokenType.NUMBER)\r\n        if (number !== null) { return new Value(parseFloat(number.value)); }\r\n\r\n        // String\r\n        const string = this._expectAny(TokenType.STRING);\r\n        if (string !== null) { return new Value(string.value.substring(1, string.value.length - 1)); }\r\n\r\n        const identifier = this._require(TokenType.IDENTIFIER);\r\n        // Range\r\n        if (identifier !== null && this._expectAny(TokenType.COLON)) {\r\n            const endIdentifier = this._require(TokenType.IDENTIFIER);\r\n            const from = this._parseReference(identifier.value);\r\n            const to = this._parseReference(endIdentifier.value);\r\n            if (!(from.col === to.col || from.row === to.row))\r\n                throw new ParsingError(`Range start and end not in same column or row: ${identifier.value}:${endIdentifier.value}`);\r\n            return new Range(from, to);\r\n        }\r\n\r\n        // Function call\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            let value = identifier.value;\r\n            do {\r\n                const args = this.parseArguments();\r\n                value = new FunctionCall(value, args);\r\n            } while (this._expectAny(TokenType.LPAREN))\r\n            return value;\r\n        }\r\n\r\n        // Reference\r\n        return this._parseReference(identifier.value);\r\n    }\r\n\r\n    // Reference -> [A-Za-z]+\\d+\r\n    _parseReference(reference) {\r\n        const referenceParts = reference.match(/^([A-Za-z]+)(\\d+)$/);\r\n        if (referenceParts === null)\r\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\r\n        return new Reference(referenceParts[1], parseInt(referenceParts[2]));\r\n    }\r\n\r\n    // Arguments -> (Expression (, Expression)*)?\r\n    parseArguments() {\r\n        const args = [];\r\n        while (!this._expectAny(TokenType.RPAREN)) {\r\n            if (args.length != 0)\r\n                this._require(TokenType.COMMA);\r\n            args.push(this.parseExpression());\r\n        }\r\n        return args;\r\n    }\r\n\r\n    _expectAny(...types) {\r\n        const current = this._next();\r\n        if (types.includes(current.type)) {\r\n            this.tokens.next();\r\n            return current;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _require(type) {\r\n        const next = this._expectAny(type);\r\n        if (next === null)\r\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\r\n        else\r\n            return next;\r\n    }\r\n\r\n    _next() {\r\n        let current = this.tokens.peek();\r\n        while (current.type === TokenType.WHITESPACE) {\r\n            this.tokens.next();\r\n            current = this.tokens.peek();\r\n        }\r\n        return current;\r\n    }\r\n}","import { Environment } from './environment';\r\n\r\nexport class Spreadsheet {\r\n    constructor(cells = {}) {\r\n        this.cells = cells;\r\n\r\n        this.builtinFunctions = {\r\n            SUM: (...values) => values.flat().reduce((a, b) => a + b, 0),\r\n            AVERAGE: (...values) => values.flat().reduce((a, b) => a + b, 0) / values.flat().length,\r\n        };\r\n\r\n        this.environment = new Environment(cells, this.builtinFunctions);\r\n    }\r\n\r\n    text(position) {\r\n        return this.environment.getText(position);\r\n    }\r\n\r\n    value(position) {\r\n        return this.environment.getValue(position);\r\n    }\r\n}","export class ParsingError extends Error {\r\n    constructor(message) { super(message); }\r\n    toString() { return `ParsingError: ${this.message}`; }\r\n}\r\n\r\nexport const TokenType = Object.freeze({\r\n    EOF: 'EOF',\r\n    WHITESPACE: 'WHITESPACE',\r\n    PLUS: 'PLUS',\r\n    MINUS: 'MINUS',\r\n    STAR: 'STAR',\r\n    SLASH: 'SLASH',\r\n    LPAREN: 'LPAREN',\r\n    RPAREN: 'RPAREN',\r\n    COLON: 'COLON',\r\n    EQUALS: 'EQUALS',\r\n    COMMA: 'COMMA',\r\n    NUMBER: 'NUMBER',\r\n    STRING: 'STRING',\r\n    IDENTIFIER: 'IDENTIFIER',\r\n});\r\n\r\nexport class Tokenizer {\r\n    constructor(rules = {\r\n        '$': TokenType.EOF,\r\n        '\\\\s+': TokenType.WHITESPACE,\r\n        '\\\\+': TokenType.PLUS,\r\n        '-': TokenType.MINUS,\r\n        '\\\\*': TokenType.STAR,\r\n        '\\\\/': TokenType.SLASH,\r\n        '\\\\(': TokenType.LPAREN,\r\n        '\\\\)': TokenType.RPAREN,\r\n        '=': TokenType.EQUALS,\r\n        ':': TokenType.COLON,\r\n        ',': TokenType.COMMA,\r\n        '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\r\n        '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\r\n        '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\r\n    }) {\r\n        this.rules = rules;\r\n    }\r\n\r\n    begin(str) {\r\n        this.remaining = str;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        const next = this.peek();\r\n        this.remaining = this.remaining.slice(next.value.length);\r\n        return next;\r\n    }\r\n\r\n    peek() {\r\n        for (let rule in this.rules) {\r\n            const match = this.remaining.match(new RegExp('^' + rule));\r\n            if (match !== null) {\r\n                return { type: this.rules[rule], value: match[0] };\r\n            }\r\n        }\r\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\r\n    }\r\n\r\n    rest() {\r\n        const rest = this.remaining;\r\n        this.remaining = \"\";\r\n        return rest;\r\n    }\r\n}"],"sourceRoot":""}