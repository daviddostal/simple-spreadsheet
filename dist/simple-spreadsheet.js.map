{"version":3,"file":"simple-spreadsheet.js","sources":["../src/errors.js","../src/tokenizer.js","../src/expressions.js","../src/parser.js","../src/evaluator.js","../src/environment.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\r\n\r\nexport class ParsingError extends SpreadsheetError {\r\n    constructor(message) { super(message); }\r\n    toString() { return `Syntax error: ${this.message}`; }\r\n}\r\n\r\nexport class RuntimeError extends SpreadsheetError {\r\n    constructor(message) { super(message); }\r\n    toString() { return `Evaluation error: ${this.message}`; }\r\n}\r\n","import { ParsingError } from './errors';\r\n\r\nexport const TokenType = Object.freeze({\r\n    EOF: 'EOF',\r\n    WHITESPACE: 'WHITESPACE',\r\n    PLUS: 'PLUS',\r\n    MINUS: 'MINUS',\r\n    STAR: 'STAR',\r\n    SLASH: 'SLASH',\r\n    LPAREN: 'LPAREN',\r\n    RPAREN: 'RPAREN',\r\n    COLON: 'COLON',\r\n    EQUALS: 'EQUALS',\r\n    COMMA: 'COMMA',\r\n    NUMBER: 'NUMBER',\r\n    STRING: 'STRING',\r\n    IDENTIFIER: 'IDENTIFIER',\r\n});\r\n\r\nexport class Tokenizer {\r\n    constructor(rules = {\r\n        '$': TokenType.EOF,\r\n        '\\\\s+': TokenType.WHITESPACE,\r\n        '\\\\+': TokenType.PLUS,\r\n        '-': TokenType.MINUS,\r\n        '\\\\*': TokenType.STAR,\r\n        '\\\\/': TokenType.SLASH,\r\n        '\\\\(': TokenType.LPAREN,\r\n        '\\\\)': TokenType.RPAREN,\r\n        '=': TokenType.EQUALS,\r\n        ':': TokenType.COLON,\r\n        ',': TokenType.COMMA,\r\n        '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\r\n        '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\r\n        '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\r\n    }) {\r\n        this.rules = rules;\r\n    }\r\n\r\n    begin(str) {\r\n        this.remaining = str;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        const next = this.peek();\r\n        this.remaining = this.remaining.slice(next.value.length);\r\n        return next;\r\n    }\r\n\r\n    peek() {\r\n        for (let rule in this.rules) {\r\n            const match = this.remaining.match(new RegExp('^' + rule));\r\n            if (match !== null) {\r\n                return { type: this.rules[rule], value: match[0] };\r\n            }\r\n        }\r\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\r\n    }\r\n\r\n    rest() {\r\n        const rest = this.remaining;\r\n        this.remaining = \"\";\r\n        return rest;\r\n    }\r\n}","export class Expression { }\r\n\r\nexport class Value extends Expression {\r\n    constructor(value) { super(); this.value = value; }\r\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\r\n}\r\n\r\nexport class Reference extends Expression {\r\n    constructor(col, row) { super(); this.col = col; this.row = row; }\r\n    get position() { return `${this.col}${this.row}`; }\r\n    toString() { return `Reference(${this.col}${this.row})`; }\r\n}\r\n\r\nexport class BinaryOp extends Expression {\r\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\r\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\r\n}\r\n\r\nexport class UnaryOp extends Expression {\r\n    constructor(op, value) { super(); this.op = op; this.value = value; }\r\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\r\n}\r\n\r\nexport class FunctionCall extends Expression {\r\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\r\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\r\n}\r\n\r\nexport class Range extends Expression {\r\n    constructor(from, to) { super(); this.from = from; this.to = to; }\r\n    toString() { return `Range(${this.from}, ${this.to})`; }\r\n}","import { TokenType } from './tokenizer';\r\nimport { ParsingError } from './errors';\r\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\r\n\r\nexport default class Parser {\r\n    constructor(tokenizer) {\r\n        this.tokens = tokenizer;\r\n    }\r\n\r\n    parse(text) {\r\n        if (text === null || text === undefined || text.constructor !== String)\r\n            return new Value(text); // if there is nothing to parse, return the value.\r\n\r\n        this.tokens.begin(text);\r\n        const result = this.parseCell();\r\n        return result;\r\n    }\r\n\r\n    // Cell -> Expression | simple value (string or number)\r\n    parseCell() {\r\n        if (this.tokens.remaining.startsWith('=')) {\r\n            this._expectAny(TokenType.EQUALS);\r\n            const result = this.parseExpression();\r\n            this._require(TokenType.EOF);\r\n            return result;\r\n        } else {\r\n            const value = this.tokens.rest();\r\n            if (value.match(/^[+-]?\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\r\n            else return new Value(value);\r\n        }\r\n    }\r\n\r\n    // Expression -> Factor\r\n    parseExpression() {\r\n        return this.parseTerm();\r\n    }\r\n\r\n    // Term -> Factor ([+-] Factor)*\r\n    parseTerm() {\r\n        let left = this.parseFactor();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseFactor());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Factor -> Unary ([*/] Unary)*\r\n    parseFactor() {\r\n        let left = this.parseUnary();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseUnary());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Unary -> [+-] Unary | Value\r\n    parseUnary() {\r\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\r\n        return operation !== null\r\n            ? new UnaryOp(operation.value, this.parseUnary())\r\n            : this.parseValue();\r\n    }\r\n\r\n    // Value -> Identifier | number | string | ( Expression ) | RangeReference\r\n    parseValue() {\r\n        // Parenthesized expression\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            const contents = this.parseExpression();\r\n            this._require(TokenType.RPAREN);\r\n            return contents;\r\n        }\r\n\r\n        // Number\r\n        const number = this._expectAny(TokenType.NUMBER)\r\n        if (number !== null) { return new Value(parseFloat(number.value)); }\r\n\r\n        // String\r\n        const string = this._expectAny(TokenType.STRING);\r\n        if (string !== null) {\r\n            const withoutQuotes = string.value.substring(1, string.value.length - 1);\r\n            const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\r\n            return new Value(escapedString);\r\n        }\r\n\r\n        const identifier = this._require(TokenType.IDENTIFIER);\r\n        // Range\r\n        if (identifier !== null && this._expectAny(TokenType.COLON)) {\r\n            const endIdentifier = this._require(TokenType.IDENTIFIER);\r\n            const from = this._parseReference(identifier.value);\r\n            const to = this._parseReference(endIdentifier.value);\r\n            return new Range(from, to);\r\n        }\r\n\r\n        // Function call\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            let value = identifier.value;\r\n            do {\r\n                const args = this.parseArguments();\r\n                value = new FunctionCall(value, args);\r\n            } while (this._expectAny(TokenType.LPAREN))\r\n            return value;\r\n        }\r\n\r\n        // Reference\r\n        return this._parseReference(identifier.value);\r\n    }\r\n\r\n    // Reference -> [A-Za-z]+\\d+\r\n    _parseReference(reference) {\r\n        const referenceParts = reference.match(/^([A-Za-z]+)(\\d+)$/);\r\n        if (referenceParts === null)\r\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\r\n        return new Reference(referenceParts[1], parseInt(referenceParts[2]));\r\n    }\r\n\r\n    // Arguments -> (Expression (, Expression)*)?\r\n    parseArguments() {\r\n        const args = [];\r\n        while (!this._expectAny(TokenType.RPAREN)) {\r\n            if (args.length != 0)\r\n                this._require(TokenType.COMMA);\r\n            args.push(this.parseExpression());\r\n        }\r\n        return args;\r\n    }\r\n\r\n    _expectAny(...types) {\r\n        const current = this._next();\r\n        if (types.includes(current.type)) {\r\n            this.tokens.next();\r\n            return current;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _require(type) {\r\n        const next = this._expectAny(type);\r\n        if (next === null)\r\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\r\n        else\r\n            return next;\r\n    }\r\n\r\n    _next() {\r\n        let current = this.tokens.peek();\r\n        while (current.type === TokenType.WHITESPACE) {\r\n            this.tokens.next();\r\n            current = this.tokens.peek();\r\n        }\r\n        return current;\r\n    }\r\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\r\nimport { RuntimeError, ParsingError } from './errors';\r\n\r\nexport default class Evaluator {\r\n    evaluateCell(cell, environment) {\r\n        switch (cell.constructor) {\r\n            case Value:\r\n                return cell.value;\r\n            case Reference:\r\n                return this.evaluateReference(cell.position, environment);\r\n            case UnaryOp:\r\n                return this.evaluateUnary(cell.op, cell.value, environment);\r\n            case BinaryOp:\r\n                return this.evaluateBinary(cell.left, cell.op, cell.right, environment);\r\n            case FunctionCall:\r\n                return this.evaluateFunction(cell.functionName, cell.args, environment);\r\n            case Range:\r\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\r\n            default:\r\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\r\n        }\r\n    }\r\n\r\n    evaluateReference(position, environment) {\r\n        try {\r\n            const entry = environment.getExpression(position) || new Value(null);\r\n            return this.evaluateCell(entry, environment);\r\n        } catch (e) {\r\n            if (e instanceof ParsingError)\r\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\r\n            else throw e;\r\n        }\r\n    }\r\n\r\n    evaluateExpression(value, environment) {\r\n        switch (value.constructor) {\r\n            case Range: return this.evaluateRange(value.from, value.to, environment);\r\n            default: return this.evaluateCell(value, environment);\r\n        }\r\n    }\r\n\r\n    evaluateUnary(op, expression, environment) {\r\n        const value = this.evaluateCell(expression, environment);\r\n        switch (op) {\r\n            case '+': return value;\r\n            case '-': return -value;\r\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateBinary(left, op, right, environment) {\r\n        const leftValue = this.evaluateCell(left, environment);\r\n        const rightValue = this.evaluateCell(right, environment);\r\n        switch (op) {\r\n            case '+': return leftValue + rightValue;\r\n            case '-': return leftValue - rightValue;\r\n            case '*': return leftValue * rightValue;\r\n            case '/': return leftValue / rightValue;\r\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateFunction(functionName, args, environment) {\r\n        const argumentValues = args.map(arg => this.evaluateExpression(arg, environment));\r\n        const func = environment.getFunction(functionName);\r\n        try {\r\n            return func(...argumentValues);\r\n        } catch (ex) {\r\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\r\n        }\r\n    }\r\n\r\n    evaluateRange(from, to, environment) {\r\n        const cells = this._cellsInRange(from, to);\r\n        const cellValues = cells.map(cell => this.evaluateCell(cell, environment));\r\n        return cellValues;\r\n    }\r\n\r\n    _cellsInRange(from, to) {\r\n        const cells = [];\r\n        for (let col of this._range(from.col.charCodeAt(0), to.col.charCodeAt(0)))\r\n            for (let row of this._range(from.row, to.row))\r\n                cells.push(new Reference(String.fromCharCode(col), row));\r\n        return cells;\r\n    }\r\n\r\n    _range(from, to) {\r\n        return from <= to\r\n            ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\r\n            : Array.from({ length: from - to + 1 }, (_, i) => from - i);\r\n    }\r\n}\r\n","import { Tokenizer } from './tokenizer';\r\nimport Parser from './parser';\r\nimport Evaluator from './evaluator';\r\nimport { RuntimeError } from './errors';\r\n\r\nexport class Environment {\r\n    constructor(cells = {}, builtinFunctions = {}) {\r\n        this.cells = cells;\r\n        this.functions = builtinFunctions;\r\n        this._parser = new Parser(new Tokenizer());\r\n        this._evaluator = new Evaluator();\r\n    }\r\n\r\n    getText(position) {\r\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\r\n    }\r\n\r\n    getExpression(position) {\r\n        const value = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\r\n        return this._parser.parse(value);\r\n    }\r\n\r\n    getValue(position) {\r\n        return this._evaluator.evaluateCell(this.getExpression(position), this);\r\n    }\r\n\r\n    getFunction(name) {\r\n        if (this.functions[name] === undefined)\r\n            throw new RuntimeError(`Unknown function: ${name} is not a function`);\r\n        return this.functions[name];\r\n    }\r\n};","import { Environment } from './environment';\r\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\r\n\r\nexport class Spreadsheet {\r\n    constructor(cells = {}) {\r\n        this.cells = cells;\r\n\r\n        this.builtinFunctions = {\r\n            SUM: (...values) => values.flat().reduce((a, b) => a + b, 0),\r\n            AVERAGE: (...values) => values.flat().reduce((a, b) => a + b, 0) / values.flat().length,\r\n        };\r\n\r\n        this.environment = new Environment(cells, this.builtinFunctions);\r\n    }\r\n\r\n    text(position) {\r\n        return this.environment.getText(position);\r\n    }\r\n\r\n    value(position) {\r\n        return this.environment.getValue(position);\r\n    }\r\n}"],"names":[],"mappings":"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"}