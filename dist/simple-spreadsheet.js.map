{"version":3,"file":"simple-spreadsheet.js","sources":["../src/errors.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/referencesMap.js","../src/environment.js","../src/functions.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from './errors';\n\nexport const TokenType = Object.freeze({\n    EOF: 'EOF',\n    WHITESPACE: 'WHITESPACE',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    STAR: 'STAR',\n    SLASH: 'SLASH',\n    LPAREN: 'LPAREN',\n    RPAREN: 'RPAREN',\n    COLON: 'COLON',\n    EQUALS: 'EQUALS',\n    COMMA: 'COMMA',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    IDENTIFIER: 'IDENTIFIER',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this.rules = {\n            // NUMBER and IDENTIFIER are used the most so keep them at the top\n            '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\n            '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\n            '\\\\s+': TokenType.WHITESPACE,\n            '\\\\+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '\\\\*': TokenType.STAR,\n            '\\\\/': TokenType.SLASH,\n            '\\\\(': TokenType.LPAREN,\n            '\\\\)': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n            '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\n            '$': TokenType.EOF,\n        };\n    }\n\n    begin(str) {\n        this.remaining = str;\n        return this;\n    }\n\n    next() {\n        const next = this.peek();\n        this.remaining = this.remaining.slice(next.value.length);\n        return next;\n    }\n\n    peek() {\n        for (let rule in this.rules) {\n            const match = this.remaining.match(new RegExp('^' + rule));\n            if (match !== null) {\n                return { type: this.rules[rule], value: match[0] };\n            }\n        }\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\n    }\n\n    rest() {\n        const rest = this.remaining;\n        this.remaining = \"\";\n        return rest;\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `Reference(${this.col}${this.row})`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `Range(${this.from}, ${this.to})`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parseRange(range) {\n    const [from, to] = range.split(':');\n    return { from: parsePosition(from), to: parsePosition(to) };\n}\n\nexport function makeRange(from, to) {\n    return `${from}:${to}`;\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts === null ? null :\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this.tokens = tokenizer;\n    }\n\n    parse(text) {\n        if (text === null || text === undefined || text.constructor !== String)\n            return { parsed: new Value(text), references: [] }; // if there is nothing to parse, return the value.\n        this.tokens.begin(text);\n        const parsed = this.parseCell();\n        return { parsed, references: [...new Set(this._getReferencesIn(parsed))] };\n    }\n\n    // Cell => '=' Expression | SimpleValue\n    parseCell() {\n        if (this.tokens.remaining.startsWith('=')) {\n            this._expectAny(TokenType.EQUALS);\n            const result = this.parseExpression();\n            this._require(TokenType.EOF);\n            return result;\n        } else {\n            return this.parseSimpleValue();\n        }\n    }\n\n    // SimpleValue => number | text\n    parseSimpleValue() {\n        const value = this.tokens.rest();\n        if (value.match(/^[+-]?\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\n        else return new Value(value);\n    }\n\n    // Expression => Term\n    parseExpression() {\n        return this.parseTerm();\n    }\n\n    // Term => Factor ([+-] Factor)*\n    parseTerm() {\n        let left = this.parseFactor();\n        let operation;\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseFactor());\n        }\n        return left;\n    }\n\n    // Factor => Unary ([*/] Unary)*\n    parseFactor() {\n        let left = this.parseUnary();\n        let operation;\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseUnary());\n        }\n        return left;\n    }\n\n    // Unary => [+-] Unary | Value\n    parseUnary() {\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this.parseUnary())\n            : this.parseValue();\n    }\n\n    // Value => Parenthesized | number | string | RangeReference | FunctionCall | Reference\n    parseValue() {\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseParenthesized();\n\n        const number = this._expectAny(TokenType.NUMBER)\n        if (number !== null)\n            return this._parseNumber(number);\n\n        const string = this._expectAny(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._require(TokenType.IDENTIFIER);\n\n        if (identifier !== null && this._expectAny(TokenType.COLON))\n            return this._parseRangeReference(identifier);\n\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseFunctionCall(identifier);\n\n        return this._parseReference(identifier.value);\n    }\n\n    // Parenthesized => ( Expression )\n    _parseParenthesized() {\n        // ( is already parsed by parseValue\n        const contents = this.parseExpression();\n        this._require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseNumber(number) {\n        return new Value(parseFloat(number.value));\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // RangeReference => identifier ':' identifier\n    _parseRangeReference(identifier) {\n        // start identifier and : are already parsed\n        const endIdentifier = this._require(TokenType.IDENTIFIER);\n        const from = this._parseReference(identifier.value);\n        const to = this._parseReference(endIdentifier.value);\n        return new Range(from, to);\n    }\n\n    // FunctionCall => identifier ( '(' Arguments ')' )*\n    _parseFunctionCall(identifier) {\n        // function name identifier is already parsed\n        let value = identifier.value;\n        do {\n            const args = this.parseArguments();\n            value = new FunctionCall(value, args);\n        } while (this._expectAny(TokenType.LPAREN))\n        return value;\n    }\n\n    // Reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // Arguments => (Expression (',' Expression)*)?\n    parseArguments() {\n        const args = [];\n        while (!this._expectAny(TokenType.RPAREN)) {\n            if (args.length != 0)\n                this._require(TokenType.COMMA);\n            args.push(this.parseExpression());\n        }\n        return args;\n    }\n\n    _expectAny(...types) {\n        const current = this._next();\n        if (types.includes(current.type)) {\n            this.tokens.next();\n            return current;\n        } else {\n            return null;\n        }\n    }\n\n    _require(type) {\n        const next = this._expectAny(type);\n        if (next === null)\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\n        else\n            return next;\n    }\n\n    _next() {\n        let current = this.tokens.peek();\n        while (current.type === TokenType.WHITESPACE) {\n            this.tokens.next();\n            current = this.tokens.peek();\n        }\n        return current;\n    }\n\n    _getReferencesIn(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case Reference:\n                return [Helpers.makePosition(expression.col, expression.row)];\n            case UnaryOp:\n                return this._getReferencesIn(expression.value);\n            case BinaryOp:\n                return [...this._getReferencesIn(expression.left), ...this._getReferencesIn(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._getReferencesIn(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from, expression.to)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new ParsingError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nexport default class Evaluator {\n    constructor() {\n        this._currentCellStack = [];\n    }\n\n    evaluateCellAt(position, cell, environment) {\n        // TODO: here we could check for cycles in cell references\n        // if the stack already contains the position.\n\n        this._currentCellStack.push({ position, references: new Set() });\n        const result = this._evaluateCell(cell, environment);\n        return result;\n        return { result, references: this._currentCellStack.pop().references };\n    }\n\n    evaluateQuery(cell, environment) {\n        return this._evaluateCell(cell, environment);\n    }\n\n    _evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case Reference:\n                return this._evaluateReference(Helpers.makePosition(cell.col, cell.row), environment);\n            case UnaryOp:\n                return this._evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(cell.functionName, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    _evaluateReference(position, environment) {\n        try {\n            const value = environment.getValue(position);\n            const currentCell = this._currentCellStack[this._currentCellStack.length - 1];\n            if (currentCell)\n                currentCell.references.add(position);\n            return value;\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\n            else throw e;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionName, args, environment) {\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        const func = environment.getFunction(functionName);\n        try {\n            return func(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from, to)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateReference(pos, environment));\n\n        const cells = Helpers.positionsInRange(from, to)\n            .map(pos => new Reference(pos.col, pos.row));\n        return cells.map(cell => this._evaluateCell(cell, environment));\n    }\n}\n","export default class ReferencesMap {\n    constructor() {\n        this._referencesIn = {};\n        this._referencesTo = {};\n    }\n\n    getReferencesIn(position) { return this._referencesIn[position]; }\n    getReferencesTo(position) { return this._referencesTo[position]; }\n\n    addReference(positionFrom, referenceTo) {\n        if (!this._referencesIn[positionFrom])\n            this._referencesIn[positionFrom] = [];\n        this._referencesIn[positionFrom].push(referenceTo);\n\n        if (!this._referencesTo[referenceTo])\n            this._referencesTo[referenceTo] = [];\n        this._referencesTo[referenceTo].push(positionFrom);\n    }\n\n    removeReferencesFrom(position) {\n        const targetNodes = this._referencesIn[position];\n        for (let target of targetNodes) {\n            const valueIndex = this._referencesTo[target].indexOf(position);\n            if (valueIndex > -1) this._referencesTo[target].splice(valueIndex, 1);\n        }\n        delete this._referencesIn[position];\n    }\n\n    traverseReferencesTo(position, callback) {\n        callback(position);\n        const referencesTo = this.getReferencesTo(position);\n        if (referencesTo) {\n            for (let reference of referencesTo) {\n                this.traverseReferencesTo(reference, callback);\n            };\n        }\n    }\n}","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells = {}, builtinFunctions = {}) {\n        this.cells = cells;\n        this.functions = builtinFunctions;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = {}; // position => expression tree\n\n        this._valuesCache = {}; // position => value;\n        this._referencesMap = new ReferencesMap();\n    }\n\n    getText(position) {\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells[position] = value;\n        delete this._expressionsCache[position];\n        this._referencesMap.traverseReferencesTo(position,\n            pos => delete this._valuesCache[pos]);\n\n        if (this._referencesMap.getReferencesIn(position))\n            this._referencesMap.removeReferencesFrom(position);\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.hasOwnProperty(position))\n            return this._expressionsCache[position];\n\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\n        const { parsed, references } = this._parser.parse(text);\n        this._expressionsCache[position] = parsed;\n\n        for (let reference of references)\n            this._referencesMap.addReference(position, reference);\n\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.hasOwnProperty(position))\n            return this._valuesCache[position];\n\n        const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._valuesCache[position] = result;\n        return result;\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getFunction(name) {\n        if (this.functions[name] === undefined)\n            throw new RuntimeError(`Unknown function: ${name} is not a function`);\n        return this.functions[name];\n    }\n};","export const builtinFunctions = {\n    SUM: (...args) => {\n        let sum = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number')\n                sum += arg;\n            else if (!(arg === null || arg === undefined))\n                throw new Error(`${typeof (arg)} is not a valid argument to SUM(). Expected number, number[], null or undefined.`);\n        }\n        return sum;\n    },\n\n    AVERAGE: (...args) => {\n        let sum = 0;\n        let count = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number') {\n                sum += arg;\n                count++;\n            } else if (!(arg === null || arg === undefined)) {\n                throw new Error(`${typeof (arg)} is not a valid argument to AVERAGE().`);\n            }\n        }\n        return sum / count;\n    },\n};","import { Environment } from './environment';\nimport { builtinFunctions } from './functions';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\nexport { builtinFunctions };\n\nexport class Spreadsheet {\n    constructor(cells = {}, functions = builtinFunctions) {\n        this.cells = cells;\n        this._environment = new Environment(this.cells, functions);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["Helpers.parsePosition","Helpers.makePosition","Helpers.positionsInRange"],"mappings":"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"}