{"version":3,"file":"simple-spreadsheet.min.js","sources":["../../src/spreadsheet/errors.js","../../src/spreadsheet/tokenStream.js","../../src/spreadsheet/tokenizer.js","../../src/spreadsheet/expressions.js","../../src/spreadsheet/helpers.js","../../src/spreadsheet/parser.js","../../src/spreadsheet/evaluator.js","../../src/spreadsheet/referencesMap.js","../../src/spreadsheet/environment.js","../../src/spreadsheet/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from \"./errors\";\n\nexport default class TokenStream {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._currentPos = 0;\n    }\n\n    peek() {\n        return this._tokens[this._currentPos] || null;\n    }\n\n    expect(...types) {\n        const token = this.peek();\n        if (token !== null && types.includes(token.type)) {\n            this._currentPos++;\n            return token;\n        }\n        return null;\n    }\n\n    require(...types) {\n        const token = this.expect(...types);\n        if (token === null)\n            throw new ParsingError(`Unexpected ${this.peek().type}, expected ${types.join(' or ')}`);\n        return token;\n    }\n}","import { ParsingError } from './errors';\nimport TokenStream from './tokenStream';\n\nexport const TokenType = Object.freeze({\n    // Note: strings must be unique, because they are used for comparison\n    EOF: 'end of formula',\n    WHITESPACE: 'whitespace',\n    PLUS: '+',\n    MINUS: '-',\n    STAR: '*',\n    SLASH: '/',\n    LPAREN: 'opening parenthesis',\n    RPAREN: 'closing parenthesis',\n    COLON: ':',\n    EQUALS: '=',\n    COMMA: 'comma',\n    NUMBER: 'number',\n    STRING: 'string',\n    IDENTIFIER: 'identifier',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this._rules = [\n            // NUMBER and IDENTIFIER are used the most so keep them at the top (for performance reasons - it makes a difference, I measured it)\n            // Patterns usually start with ^ so they match the start of the remaining\n            // string, not anywhere in the middle.\n            { pattern: /^\\d+(?:\\.\\d+)?/, type: TokenType.NUMBER },\n            { pattern: /^[a-zA-Z]\\w+/, type: TokenType.IDENTIFIER },\n            { pattern: /^\"(?:[^\"\\\\]|\\\\.)*\"/, type: TokenType.STRING },\n            { pattern: /^$/, type: TokenType.EOF },\n        ];\n\n        this._operators = {\n            ' ': TokenType.WHITESPACE,\n            '\\t': TokenType.WHITESPACE,\n            '\\r': TokenType.WHITESPACE,\n            '\\n': TokenType.WHITESPACE,\n            '+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '*': TokenType.STAR,\n            '/': TokenType.SLASH,\n            '(': TokenType.LPAREN,\n            ')': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n        }\n    }\n\n    tokenize(text) {\n        const tokens = [];\n        let remaining = text;\n        while (remaining.length > 0) {\n            const token = this._nextToken(remaining);\n            tokens.push(token);\n            remaining = remaining.slice(token.value.length);\n        }\n        tokens.push({ type: TokenType.EOF, value: '' });\n        return new TokenStream(tokens.filter(token => token.type !== TokenType.WHITESPACE));\n    }\n\n    _nextToken(text) {\n        const firstChar = text[0];\n        const operator = this._operators[firstChar];\n        if (operator !== undefined) return { type: operator, value: firstChar };\n\n        for (let rule of this._rules) {\n            const match = text.match(rule.pattern);\n            if (match !== null)\n                return { type: rule.type, value: match[0] };\n        }\n        throw new ParsingError(`Unknown token at '${text}'`);\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    // TODO: Maybe refactor to only hold single property?\n    // Normalize position?\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `${this.col}${this.row}`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `${this.op}${this.value}`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `${this.functionName}(${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `${this.from}:${this.to}`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    // TODO: Use flatMap?\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts &&\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this._tokenizer = tokenizer;\n        this._tokens = null;\n    }\n\n    // cell => empty | '=' expression EOF | number | string\n    parse(text) {\n        // empty cell or other value\n        if (text === null || text === undefined || text.constructor !== String)\n            return { parsed: new Value(text), references: [] };\n\n        // formula\n        if (text.trimStart().startsWith('=')) {\n            this._tokens = this._tokenizer.tokenize(text);\n            this._tokens.require(TokenType.EQUALS);\n            const parsed = this._parseExpression();\n            this._tokens.require(TokenType.EOF);\n            const references = [...new Set(this._getReferences(parsed))];\n            return { parsed, references };\n        }\n\n        // number\n        if (text.match(/^[+-]?\\d+(?:\\.\\d+)?$/))\n            return { parsed: new Value(parseFloat(text)), references: [] };\n\n        // string\n        return { parsed: new Value(text), references: [] };\n    }\n\n    // expression => term\n    _parseExpression() {\n        return this._parseTerm();\n    }\n\n    // term => factor (('+'|'-') factor)*\n    _parseTerm() {\n        let left = this._parseFactor();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseFactor());\n        }\n        return left;\n    }\n\n    // factor => unary (('*'|'/') unary)*\n    _parseFactor() {\n        let left = this._parseRange();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseRange());\n        }\n        return left;\n    }\n\n    // range => unary (':' unary)*\n    _parseRange() {\n        // TODO: Make ranges first-class\n        return this._parseUnary();\n    }\n\n    // unary => ('+'|'-') unary | call\n    _parseUnary() {\n        const operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this._parseUnary())\n            : this._parseValue();\n    }\n\n    // value => number | string | rangeReference | reference | parenthesized | functionCall\n    _parseValue() {\n        if (this._tokens.expect(TokenType.LPAREN))\n            return this._finishParenthesized();\n\n        const number = this._tokens.expect(TokenType.NUMBER)\n        if (number !== null)\n            return new Value(parseFloat(number.value));\n\n        const string = this._tokens.expect(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._tokens.expect(TokenType.IDENTIFIER);\n        if (identifier !== null) {\n            if (this._tokens.expect(TokenType.COLON))\n                return this._finishRangeReference(identifier);\n\n            if (this._tokens.expect(TokenType.LPAREN))\n                return this._finishFunctionCall(identifier);\n\n            return this._parseReference(identifier.value);\n        }\n        throw new ParsingError(`Unexpected ${this._tokens.peek().type}, expected an expression or value`)\n    }\n\n    // parenthesized => '(' expression ')'\n    _finishParenthesized() {\n        const contents = this._parseExpression();\n        this._tokens.require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // rangeReference => IDENTIFIER ':' IDENTIFIER\n    _finishRangeReference(start) {\n        // start identifier and : are already parsed\n        const end = this._tokens.require(TokenType.IDENTIFIER);\n        const from = this._parseReference(start.value);\n        const to = this._parseReference(end.value);\n        return new Range(from, to);\n    }\n\n    // functionCall => IDENTIFIER ('(' arguments ')')*\n    _finishFunctionCall(identifier) {\n        // TODO: Test or remove nested function calls such as FOO()()\n        // Or check for function return types at runtime?\n\n        const args = this._parseArguments();\n        this._tokens.expect(TokenType.RPAREN);\n        return new FunctionCall(identifier.value, args);\n    }\n\n    // reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // arguments => (expression (',' expression)*)?\n    _parseArguments() {\n        const args = [];\n        while (this._tokens.peek().type !== TokenType.RPAREN) {\n            if (args.length != 0)\n                this._tokens.require(TokenType.COMMA);\n            args.push(this._parseExpression());\n        }\n        return args;\n    }\n\n    _getReferences(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case Reference:\n                return [Helpers.makePosition(expression.col, expression.row)];\n            case UnaryOp:\n                return this._getReferences(expression.value);\n            case BinaryOp:\n                return [...this._getReferences(expression.left), ...this._getReferences(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._getReferences(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from, expression.to)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new ParsingError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nclass CircularReferenceError extends Error {\n    constructor(message, cell) { super(message); this.cell = cell; }\n}\n\nexport default class Evaluator {\n    constructor() {\n        this.visitedCellStack = [];\n    }\n\n    evaluateCellAt(position, cell, environment) {\n        if (this.visitedCellStack.includes(position))\n            throw new CircularReferenceError(`Circular reference detected (${this.visitedCellStack.join(' -> ')} -> ${position})`, cell);\n\n        this.visitedCellStack.push(position);\n        try {\n            const result = this._evaluateCell(cell, environment);\n            this.visitedCellStack.pop();\n            return result;\n        } catch (ex) {\n            this.visitedCellStack.pop()\n            // Normal errors propagate as usual, but CircularReferenceError is used\n            // only to propagate the exception to the originating cell internally\n            // (so it doesn't get reported just as an error in a referenced cell).\n            // Once the CircularReferenceError reaches back to the originating cell,\n            // we turn it into a normal RuntimeError.\n            if (ex instanceof CircularReferenceError && ex.cell === cell) {\n                throw new RuntimeError(ex.message);\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    evaluateQuery(cell, environment) {\n        return this._evaluateCell(cell, environment);\n    }\n\n    _evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case Reference:\n                return this._evaluateReference(Helpers.makePosition(cell.col, cell.row), environment);\n            case UnaryOp:\n                return this._evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(cell.functionName, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    _evaluateReference(position, environment) {\n        try {\n            return environment.getValue(position);\n        } catch (e) {\n            if (e instanceof ParsingError || e instanceof RuntimeError)\n                throw new RuntimeError(`Error in referenced cell ${position}`);\n            else throw e;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionName, args, environment) {\n        let func = environment.getFunction(functionName);\n        func = func instanceof Function ? { isMacro: false, function: func } : func;\n        return (func.isMacro === true) ?\n            this._evaluateMacro(functionName, func, args, environment) :\n            this._evaluateSpreadsheetFunction(functionName, func, args, environment);\n    }\n\n    _evaluateSpreadsheetFunction(functionName, func, args, environment) {\n        const argumentValues = this._evaluateArguments(functionName, args, environment);\n        try {\n            return func.function(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\n        }\n    }\n\n    _evaluateArguments(functionName, args, environment) {\n        let evaluatedArgs = [];\n        for (let i = 0; i < args.length; i++) {\n            try {\n                evaluatedArgs.push(this._evaluateExpression(args[i], environment));\n            } catch (ex) {\n                throw new RuntimeError(`Error in function argument ${i + 1} in function ${functionName}: ${ex}`);\n            }\n        }\n        return evaluatedArgs;\n    }\n\n    _evaluateMacro(macroName, macro, args, environment) {\n        const argsLazyValues = args.map(arg => () => this._evaluateExpression(arg, environment));\n        try {\n            return macro.function(...argsLazyValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in macro ${macroName}: ${ex}`);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from, to)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateReference(pos, environment));\n    }\n}\n","export default class ReferencesMap {\n    constructor() {\n        // TODO: maybe use a Map? (but profile performance - addReference is run a lot)\n        this._referencesFrom = {};\n        this._referencesTo = {};\n    }\n\n    getReferencesFrom(position) { return this._referencesFrom[position]; }\n    getReferencesTo(position) { return this._referencesTo[position]; }\n\n    addReference(positionFrom, referenceTo) {\n        if (!this._referencesFrom[positionFrom])\n            this._referencesFrom[positionFrom] = [];\n        this._referencesFrom[positionFrom].push(referenceTo);\n\n        if (!this._referencesTo[referenceTo])\n            this._referencesTo[referenceTo] = [];\n        this._referencesTo[referenceTo].push(positionFrom);\n    }\n\n    removeReferencesFrom(position) {\n        const targetNodes = this._referencesFrom[position];\n        for (let target of targetNodes) {\n            const valueIndex = this._referencesTo[target].indexOf(position);\n            if (valueIndex > -1) this._referencesTo[target].splice(valueIndex, 1);\n        }\n        delete this._referencesFrom[position];\n    }\n\n    getAffectedCells(position) {\n        // TODO: maybe optimize using stack and for loop\n        const referencesTo = this.getReferencesTo(position);\n        if (!referencesTo) return [];\n\n        const recursiveReferences = referencesTo.flatMap(this.getAffectedCells.bind(this));\n        return [...referencesTo, ...recursiveReferences];\n    }\n}","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells, functions, cellsChangedListener) {\n        this.cells = cells;\n        this.functions = functions;\n        this.onCellsChanged = cellsChangedListener;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = new Map(); // { position => expression tree (AST) }\n        this._valuesCache = new Map(); // { position => value; }\n        this._referencesMap = new ReferencesMap();\n    }\n\n    getText(position) {\n        return this.cells.has(position) ? this.cells.get(position).toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells.set(position, value);\n\n        const affectedCells = [position, ...this._referencesMap.getAffectedCells(position)];\n        for (let pos of affectedCells)\n            this._valuesCache.delete(pos);\n\n        this._expressionsCache.delete(position);\n        if (this._referencesMap.getReferencesFrom(position))\n            this._referencesMap.removeReferencesFrom(position);\n\n        this.onCellsChanged(affectedCells);\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.has(position))\n            return this._expressionsCache.get(position);\n\n        const text = this.cells.has(position) ? this.cells.get(position) : null;\n        const { parsed, references } = this._parser.parse(text);\n        this._expressionsCache.set(position, parsed);\n\n        for (let reference of references)\n            this._referencesMap.addReference(position, reference);\n\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.has(position))\n            return this._valuesCache.get(position);\n\n        const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._valuesCache.set(position, result);\n        return result;\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getFunction(name) {\n        if (!this.functions.has(name))\n            throw new RuntimeError(`Unknown function: ${name}`);\n        return this.functions.get(name);\n    }\n}","import { Environment } from './environment';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\n\nexport class Spreadsheet {\n    constructor(cells = new Map(), functions = new Map(), onCellsChanged = (() => { })) {\n        // TODO: confirm this.cells are updated\n        // TODO: test cells\n        this.cells = cells instanceof Map ? cells : new Map(Object.entries(cells))\n        // TODO: test functions\n        this.functions = functions instanceof Map ? functions : new Map(Object.entries(functions))\n        this._environment = new Environment(this.cells, this.functions, onCellsChanged);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["SpreadsheetError","Error","ParsingError","[object Object]","message","super","this","RuntimeError","TokenStream","tokens","_tokens","_currentPos","types","token","peek","includes","type","expect","join","TokenType","Object","freeze","EOF","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","IDENTIFIER","Tokenizer","_rules","pattern","_operators"," ","\t","\r","\n","+","-","*","/","(",")","=",":",",","text","remaining","length","_nextToken","push","slice","value","filter","firstChar","operator","undefined","rule","match","Expression","Value","constructor","String","Reference","col","row","BinaryOp","left","op","right","UnaryOp","FunctionCall","functionName","args","Range","from","to","positionsInRange","positions","_range","columnIndex","columnLetter","Array","_","i","parsePosition","position","positionParts","parseInt","makePosition","colLetter","charCodeAt","colIndex","fromCharCode","Parser","tokenizer","_tokenizer","parsed","references","trimStart","startsWith","tokenize","require","_parseExpression","Set","_getReferences","parseFloat","_parseTerm","operation","_parseFactor","_parseRange","_parseUnary","_parseValue","_finishParenthesized","number","string","_parseString","identifier","_finishRangeReference","_finishFunctionCall","_parseReference","contents","escapedString","substring","replace","start","end","_parseArguments","reference","Helpers.parsePosition","expression","Helpers.makePosition","flatMap","arg","Helpers.positionsInRange","map","pos","CircularReferenceError","cell","Evaluator","visitedCellStack","environment","result","_evaluateCell","pop","ex","_evaluateReference","_evaluateUnary","_evaluateBinary","_evaluateFunction","getValue","e","_evaluateRange","leftValue","rightValue","func","getFunction","Function","isMacro","function","_evaluateMacro","_evaluateSpreadsheetFunction","argumentValues","_evaluateArguments","evaluatedArgs","_evaluateExpression","macroName","macro","argsLazyValues","ReferencesMap","_referencesFrom","_referencesTo","positionFrom","referenceTo","targetNodes","target","valueIndex","indexOf","splice","referencesTo","getReferencesTo","recursiveReferences","getAffectedCells","bind","Environment","cells","functions","cellsChangedListener","onCellsChanged","_parser","_evaluator","_expressionsCache","Map","_valuesCache","_referencesMap","has","get","toString","set","affectedCells","delete","getReferencesFrom","removeReferencesFrom","parse","addReference","evaluateCellAt","getExpression","evaluateQuery","name","Spreadsheet","entries","_environment","getText","setText"],"mappings":"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"}