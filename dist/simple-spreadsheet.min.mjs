class SpreadsheetError extends Error{}class ParsingError extends SpreadsheetError{constructor(e){super(e)}toString(){return`Syntax error: ${this.message}`}}class RuntimeError extends SpreadsheetError{constructor(e){super(e)}toString(){return`Evaluation error: ${this.message}`}}class TokenStream{constructor(e){this._tokens=e,this._currentPos=0}peek(){return this._tokens[this._currentPos]||null}expect(...e){const t=this.peek();return null!==t&&e.includes(t.type)?(this._currentPos++,t):null}require(...e){const t=this.expect(...e);if(null===t)throw new ParsingError(`Unexpected ${this.peek().type}, expected ${e.join(" or ")}.`);return t}}const e=Object.freeze({EOF:"end of formula",WHITESPACE:"whitespace",PLUS:"+",MINUS:"-",STAR:"*",SLASH:"/",LPAREN:"opening parenthesis",RPAREN:"closing parenthesis",COLON:":",EQUALS:"=",COMMA:"comma",NUMBER:"number",STRING:"string",REFERENCE:"reference",IDENTIFIER:"identifier"});class Tokenizer{constructor(){this._rules=[{pattern:/^\d+(?:\.\d+)?/,type:e.NUMBER},{pattern:/^[A-Za-z]+\d+/,type:e.REFERENCE},{pattern:/^[a-zA-Z]\w+/,type:e.IDENTIFIER},{pattern:/^\s+/,type:e.WHITESPACE},{pattern:/^\+/,type:e.PLUS},{pattern:/^\-/,type:e.MINUS},{pattern:/^\*/,type:e.STAR},{pattern:/^\//,type:e.SLASH},{pattern:/^\(/,type:e.LPAREN},{pattern:/^\)/,type:e.RPAREN},{pattern:/^=/,type:e.EQUALS},{pattern:/^:/,type:e.COLON},{pattern:/^,/,type:e.COMMA},{pattern:/^\"(?:[^"\\]|\\.)*\"/,type:e.STRING},{pattern:/^$/,type:e.EOF}]}tokenize(t){const r=[];let s=t;for(;s.length>0;){const e=this._nextToken(s);r.push(e),s=s.slice(e.value.length)}return r.push({type:e.EOF,value:""}),new TokenStream(r.filter(t=>t.type!==e.WHITESPACE))}_nextToken(e){for(let t of this._rules){const r=e.match(t.pattern);if(null!==r)return{type:t.type,value:r[0]}}throw new ParsingError(`Unknown token at '${e}'`)}}class Expression{}class Value extends Expression{constructor(e){super(),this.value=e}toString(){return this.value.constructor===String?`"${this.value}"`:`${this.value}`}}class CellReference extends Expression{constructor(e){super(),this.position=e}toString(){return`${this.position}`}}class Reference extends Expression{constructor(e){super(),this.name=e}toString(){return`${this.name}`}}class BinaryOp extends Expression{constructor(e,t,r){super(),this.left=e,this.op=t,this.right=r}toString(){return`(${this.left} ${this.op} ${this.right})`}}class UnaryOp extends Expression{constructor(e,t){super(),this.op=e,this.value=t}toString(){return`${this.op}${this.value}`}}class FunctionCall extends Expression{constructor(e,t){super(),this.functionValue=e,this.args=t}toString(){return`${this.functionValue}(${this.args.join(", ")})`}}class Range extends Expression{constructor(e,t){super(),this.from=e,this.to=t}toString(){return`${this.from}:${this.to}`}}function t(e,t){const n=[],i=s(e),l=s(t);for(let e of r(o(i.col),o(l.col)))for(let t of r(i.row,l.row))n.push({col:a(e),row:t});return n}function r(e,t){return e<=t?Array.from({length:t-e+1},(t,r)=>r+e):Array.from({length:e-t+1},(t,r)=>e-r)}function s(e){const t=e.match(/^([A-Za-z]+)(\d+)$/);return t&&{col:t[1],row:parseInt(t[2])}}function n(e,t){return`${e}${t}`}function o(e){return e.charCodeAt(0)-65}function a(e){return String.fromCharCode(e+65)}var i=Object.freeze({positionsInRange:t,parsePosition:s,makePosition:n,columnIndex:o,columnLetter:a});class Parser{constructor(e){this._tokenizer=e,this._tokens=null}parse(t){if(null==t||t.constructor!==String)return{parsed:new Value(t),references:[]};if(t.trimStart().startsWith("=")){this._tokens=this._tokenizer.tokenize(t),this._tokens.require(e.EQUALS);const r=this._parseExpression();return this._tokens.require(e.EOF),{parsed:r,references:[...new Set(this._getCellReferences(r))]}}return t.match(/^[+-]?\d+(?:\.\d+)?$/)?{parsed:new Value(parseFloat(t)),references:[]}:{parsed:new Value(t),references:[]}}_parseExpression(){return this._parseTerm()}_parseTerm(){let t,r=this._parseFactor();for(;null!==(t=this._tokens.expect(e.PLUS,e.MINUS));)r=new BinaryOp(r,t.value,this._parseFactor());return r}_parseFactor(){let t,r=this._parseRange();for(;null!==(t=this._tokens.expect(e.STAR,e.SLASH));)r=new BinaryOp(r,t.value,this._parseRange());return r}_parseRange(){return this._parseUnary()}_parseUnary(){const t=this._tokens.expect(e.PLUS,e.MINUS);return null!==t?new UnaryOp(t.value,this._parseUnary()):this._parseCall()}_parseCall(){let t=this._parseValue();for(;this._tokens.expect(e.LPAREN);){const r=this._parseArguments();this._tokens.expect(e.RPAREN),t=new FunctionCall(t,r)}return t}_parseValue(){const t=this._tokens.expect(e.NUMBER);if(null!==t)return this._parseNumber(t);const r=this._tokens.expect(e.STRING);if(null!==r)return this._parseString(r);const s=this._tokens.expect(e.REFERENCE);if(null!=s&&this._tokens.expect(e.COLON))return this._finishRangeReference(s);if(null!=s)return this._parseCellReference(s);const n=this._tokens.expect(e.IDENTIFIER);if(null!==n)return new Reference(n.value);if(this._tokens.expect(e.LPAREN))return this._finishParenthesized();throw new ParsingError(`Unexpected ${this._tokens.peek().type}, expected an expression or value`)}_finishParenthesized(){const t=this._parseExpression();return this._tokens.require(e.RPAREN),t}_parseNumber(e){return new Value(parseFloat(e.value))}_parseString(e){const t=e.value.substring(1,e.value.length-1).replace(/\\(.)/g,"$1");return new Value(t)}_finishRangeReference(t){const r=this._tokens.require(e.REFERENCE),s=new CellReference(t.value),n=new CellReference(r.value);return new Range(s,n)}_parseCellReference(e){const t=s(e.value),r=n(t.col,t.row);return new CellReference(r)}_parseArguments(){const t=[];for(;this._tokens.peek().type!==e.RPAREN;)0!=t.length&&this._tokens.require(e.COMMA),t.push(this._parseExpression());return t}_getCellReferences(e){switch(e.constructor){case Value:return[];case CellReference:return[e.position];case Reference:return[];case UnaryOp:return this._getCellReferences(e.value);case BinaryOp:return[...this._getCellReferences(e.left),...this._getCellReferences(e.right)];case FunctionCall:return e.args.flatMap(e=>this._getCellReferences(e));case Range:return t(e.from.position,e.to.position).map(e=>n(e.col,e.row));default:throw new ParsingError(`Unknown expression type: ${typeof e}`)}}}class Evaluator{constructor(){this.visitedCellStack=[]}evaluateCellAt(e,t,r){if(this.visitedCellStack.includes(e))throw new RuntimeError(`Circular reference detected (${this.visitedCellStack.join(" -> ")} -> ${e})`);this.visitedCellStack.push(e);const s=this._evaluateCell(t,r);return this.visitedCellStack.pop(),s}evaluateQuery(e,t){return this._evaluateCell(e,t)}_evaluateCell(e,t){switch(e.constructor){case Value:return e.value;case CellReference:return this._evaluateCellReference(e.position,t);case Reference:return t.getGlobal(e.name,t);case UnaryOp:return this._evaluateUnary(e.op,e.value,t);case BinaryOp:return this._evaluateBinary(e.left,e.op,e.right,t);case FunctionCall:return this._evaluateFunction(e.functionValue,e.args,t);case Range:throw new RuntimeError("Range references are allowed only as arguments of functions");default:throw new RuntimeError(`Unknown expression type: ${typeof e}`)}}_evaluateCellReference(e,t){try{return t.getValue(e)}catch(t){throw t instanceof ParsingError?new RuntimeError(`Error in referenced cell ${e}`):t}}_evaluateExpression(e,t){switch(e.constructor){case Range:return this._evaluateRange(e.from,e.to,t);default:return this._evaluateCell(e,t)}}_evaluateUnary(e,t,r){const s=this._evaluateCell(t,r);switch(e){case"+":return s;case"-":return-s;default:throw new RuntimeError(`Unknown unary operator: '${e}'`)}}_evaluateBinary(e,t,r,s){const n=this._evaluateCell(e,s),o=this._evaluateCell(r,s);switch(t){case"+":return n+o;case"-":return n-o;case"*":return n*o;case"/":return n/o;default:throw new RuntimeError(`Unknown binary operator: '${t}'`)}}_evaluateFunction(e,t,r){const s=this._evaluateCell(e,r);if("function"!=typeof s)throw new RuntimeError(`'${e}' is called like a function, but is of type '${typeof s}' with value '${s}'.`);const n=t.map(e=>this._evaluateExpression(e,r));try{return s(...n)}catch(t){throw new RuntimeError(`Error in function ${e}: ${t}`)}}_evaluateRange(e,r,s){return t(e.position,r.position).map(e=>n(e.col,e.row)).map(e=>this._evaluateCellReference(e,s))}}class ReferencesMap{constructor(){this._referencesFrom={},this._referencesTo={}}getReferencesFrom(e){return this._referencesFrom[e]}getReferencesTo(e){return this._referencesTo[e]}addReference(e,t){this._referencesFrom[e]||(this._referencesFrom[e]=[]),this._referencesFrom[e].push(t),this._referencesTo[t]||(this._referencesTo[t]=[]),this._referencesTo[t].push(e)}removeReferencesFrom(e){const t=this._referencesFrom[e];for(let r of t){const t=this._referencesTo[r].indexOf(e);t>-1&&this._referencesTo[r].splice(t,1)}delete this._referencesFrom[e]}getAffectedCells(e){const t=this.getReferencesTo(e);if(!t)return[];const r=t.flatMap(this.getAffectedCells.bind(this));return[...t,...r]}}class Environment{constructor(e={},t={},r=(()=>{})){this.cells=e,this.globals=t,this.cellsChangedListener=r,this._parser=new Parser(new Tokenizer),this._evaluator=new Evaluator,this._expressionsCache={},this._valuesCache={},this._referencesMap=new ReferencesMap}getText(e){return this.cells.hasOwnProperty(e)?this.cells[e].toString():""}setText(e,t){this.cells[e]=t;const r=[e,...this._referencesMap.getAffectedCells(e)];for(let e of r)delete this._valuesCache[e];delete this._expressionsCache[e],this._referencesMap.getReferencesFrom(e)&&this._referencesMap.removeReferencesFrom(e),this.cellsChangedListener(r)}getExpression(e){if(this._expressionsCache.hasOwnProperty(e))return this._expressionsCache[e];const t=this.cells.hasOwnProperty(e)?this.cells[e]:null,{parsed:r,references:s}=this._parser.parse(t);this._expressionsCache[e]=r;for(let t of s)this._referencesMap.addReference(e,t);return r}getValue(e){if(this._valuesCache.hasOwnProperty(e))return this._valuesCache[e];const t=this._evaluator.evaluateCellAt(e,this.getExpression(e),this);return this._valuesCache[e]=t,t}evaluateQuery(e){const{parsed:t,_:r}=this._parser.parse(e);return this._evaluator.evaluateQuery(t,this)}getGlobal(e){if(void 0===this.globals[e])throw new RuntimeError(`Unknown global value: ${e}`);return this.globals[e]}}const l={SUM:(...e)=>{let t=0;for(let r of e.flat())if("number"==typeof r)t+=r;else if(null!=r)throw new Error(`${typeof r} is not a valid argument to SUM(). Expected number, number[], null or undefined.`);return t},AVERAGE:(...e)=>{let t=0,r=0;for(let s of e.flat())if("number"==typeof s)t+=s,r++;else if(null!=s)throw new Error(`${typeof s} is not a valid argument to AVERAGE().`);return t/r}};class Spreadsheet{constructor(e={},t=l,r){this.cells=e,this._environment=new Environment(this.cells,t,r)}text(e){return this._environment.getText(e)}set(e,t){this._environment.setText(e,t)}value(e){return this._environment.getValue(e)}query(e){return this._environment.evaluateQuery(e)}}export{i as Helpers,ParsingError,RuntimeError,Spreadsheet,SpreadsheetError,l as builtinValues};
//# sourceMappingURL=simple-spreadsheet.min.mjs.map
