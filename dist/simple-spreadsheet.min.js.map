{"version":3,"file":"simple-spreadsheet.min.js","sources":["../src/errors.js","../src/tokenStream.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/referencesMap.js","../src/environment.js","../src/builtinValues.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from \"./errors\";\n\nexport default class TokenStream {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._currentPos = 0;\n    }\n\n    peek() {\n        return this._tokens[this._currentPos] || null;\n    }\n\n    expect(...types) {\n        const token = this.peek();\n        if (token !== null && types.includes(token.type)) {\n            this._currentPos++;\n            return token;\n        }\n        return null;\n    }\n\n    require(...types) {\n        const token = this.expect(...types);\n        if (token === null)\n            throw new ParsingError(`Unexpected ${this.peek().type}, expected ${types.join(' or ')}.`);\n        return token;\n    }\n}","import { ParsingError } from './errors';\nimport TokenStream from './tokenStream';\n\nexport const TokenType = Object.freeze({\n    // Note: strings must be unique, because they are used for comparison\n    EOF: 'end of formula',\n    WHITESPACE: 'whitespace',\n    PLUS: '+',\n    MINUS: '-',\n    STAR: '*',\n    SLASH: '/',\n    LPAREN: 'opening parenthesis',\n    RPAREN: 'closing parenthesis',\n    COLON: ':',\n    EQUALS: '=',\n    COMMA: 'comma',\n    NUMBER: 'number',\n    STRING: 'string',\n    REFERENCE: 'reference',\n    IDENTIFIER: 'identifier',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this._rules = [\n            // NUMBER, REFERENCE and IDENTIFIER are used the most so keep them at the top\n            { pattern: /^\\d+(?:\\.\\d+)?/, type: TokenType.NUMBER },\n            { pattern: /^[A-Za-z]+\\d+/, type: TokenType.REFERENCE },\n            { pattern: /^[a-zA-Z]\\w+/, type: TokenType.IDENTIFIER },\n            { pattern: /^\\s+/, type: TokenType.WHITESPACE },\n            { pattern: /^\\+/, type: TokenType.PLUS },\n            { pattern: /^\\-/, type: TokenType.MINUS },\n            { pattern: /^\\*/, type: TokenType.STAR },\n            { pattern: /^\\//, type: TokenType.SLASH },\n            { pattern: /^\\(/, type: TokenType.LPAREN },\n            { pattern: /^\\)/, type: TokenType.RPAREN },\n            { pattern: /^=/, type: TokenType.EQUALS },\n            { pattern: /^:/, type: TokenType.COLON },\n            { pattern: /^,/, type: TokenType.COMMA },\n            { pattern: /^\\\"(?:[^\"\\\\]|\\\\.)*\\\"/, type: TokenType.STRING },\n            { pattern: /^$/, type: TokenType.EOF },\n        ];\n    }\n\n    tokenize(text) {\n        const tokens = [];\n        let remaining = text;\n        while (remaining.length > 0) {\n            const token = this._nextToken(remaining);\n            tokens.push(token);\n            remaining = remaining.slice(token.value.length);\n        }\n        tokens.push({ type: TokenType.EOF, value: '' });\n        return new TokenStream(tokens.filter(token => token.type !== TokenType.WHITESPACE));\n    }\n\n    _nextToken(text) {\n        for (let rule of this._rules) {\n            const match = text.match(rule.pattern);\n            if (match !== null)\n                return { type: rule.type, value: match[0] };\n        }\n        throw new ParsingError(`Unknown token at '${text}'`);\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class CellReference extends Expression {\n    constructor(position) { super(); this.position = position }\n    toString() { return `${this.position}`; }\n}\n\nexport class Reference extends Expression {\n    constructor(name) { super(); this.name = name }\n    toString() { return `${this.name}`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `${this.op}${this.value}`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionValue, args) { super(); this.functionValue = functionValue; this.args = args; }\n    toString() { return `${this.functionValue}(${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `${this.from}:${this.to}`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    const fromPos = parsePosition(from);\n    const toPos = parsePosition(to);\n    for (let col of _range(columnIndex(fromPos.col), columnIndex(toPos.col)))\n        for (let row of _range(fromPos.row, toPos.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts &&\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, CellReference, BinaryOp, UnaryOp, Range, FunctionCall, Reference } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this._tokenizer = tokenizer;\n        this._tokens = null;\n    }\n\n    // cell => empty | '=' expression EOF | number | string\n    parse(text) {\n        // empty cell or other value\n        if (text === null || text === undefined || text.constructor !== String)\n            return { parsed: new Value(text), references: [] };\n\n        // formula\n        if (text.trimStart().startsWith('=')) {\n            this._tokens = this._tokenizer.tokenize(text);\n            this._tokens.require(TokenType.EQUALS);\n            const parsed = this._parseExpression();\n            this._tokens.require(TokenType.EOF);\n            const references = [...new Set(this._getCellReferences(parsed))];\n            return { parsed, references };\n        }\n\n        // number\n        if (text.match(/^[+-]?\\d+(?:\\.\\d+)?$/))\n            return { parsed: new Value(parseFloat(text)), references: [] };\n\n        // string\n        return { parsed: new Value(text), references: [] };\n    }\n\n    // expression => term\n    _parseExpression() {\n        return this._parseTerm();\n    }\n\n    // term => factor (('+'|'-') factor)*\n    _parseTerm() {\n        let left = this._parseFactor();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseFactor());\n        }\n        return left;\n    }\n\n    // factor => unary (('*'|'/') unary)*\n    _parseFactor() {\n        let left = this._parseRange();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseRange());\n        }\n        return left;\n    }\n\n    // range => unary (':' unary)*\n    _parseRange() {\n        // TODO: Make ranges first-class\n        return this._parseUnary();\n    }\n\n    // unary => ('+'|'-') unary | call\n    _parseUnary() {\n        const operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this._parseUnary())\n            : this._parseCall();\n    }\n\n    // call => value ('(' arguments ')')*\n    _parseCall() {\n        let value = this._parseValue();\n        while (this._tokens.expect(TokenType.LPAREN)) {\n            const args = this._parseArguments();\n            this._tokens.expect(TokenType.RPAREN);\n            value = new FunctionCall(value, args);\n        }\n        return value;\n    }\n\n    // value => number | string | rangeReference | reference | parenthesized\n    _parseValue() {\n        const number = this._tokens.expect(TokenType.NUMBER)\n        if (number !== null)\n            return this._parseNumber(number);\n\n        const string = this._tokens.expect(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n        const reference = this._tokens.expect(TokenType.REFERENCE);\n        if (reference != null && this._tokens.expect(TokenType.COLON))\n            return this._finishRangeReference(reference);\n        else if (reference != null)\n            return this._parseCellReference(reference);\n\n        const identifier = this._tokens.expect(TokenType.IDENTIFIER);\n        if (identifier !== null)\n            return new Reference(identifier.value);\n\n        if (this._tokens.expect(TokenType.LPAREN))\n            return this._finishParenthesized();\n\n        throw new ParsingError(`Unexpected ${this._tokens.peek().type}, expected an expression or value`)\n    }\n\n    // parenthesized => '(' expression ')'\n    _finishParenthesized() {\n        const contents = this._parseExpression();\n        this._tokens.require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseNumber(number) {\n        return new Value(parseFloat(number.value));\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // rangeReference => IDENTIFIER ':' IDENTIFIER\n    _finishRangeReference(fromReference) {\n        const toReference = this._tokens.require(TokenType.REFERENCE);\n        const from = new CellReference(fromReference.value);\n        const to = new CellReference(toReference.value);\n        return new Range(from, to);\n    }\n\n    _parseCellReference(reference) {\n        // TODO: make nicer, maybe drop helper functions altogether.\n        const parsedPos = Helpers.parsePosition(reference.value);\n        const position = Helpers.makePosition(parsedPos.col, parsedPos.row);\n        return new CellReference(position);\n    }\n\n    // arguments => (expression (',' expression)*)?\n    _parseArguments() {\n        const args = [];\n        while (this._tokens.peek().type !== TokenType.RPAREN) {\n            if (args.length != 0)\n                this._tokens.require(TokenType.COMMA);\n            args.push(this._parseExpression());\n        }\n        return args;\n    }\n\n    _getCellReferences(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case CellReference:\n                return [expression.position];\n            case Reference:\n                return [];\n            case UnaryOp:\n                return this._getCellReferences(expression.value);\n            case BinaryOp:\n                return [...this._getCellReferences(expression.left), ...this._getCellReferences(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._getCellReferences(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from.position, expression.to.position)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new ParsingError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp, CellReference } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nexport default class Evaluator {\n    constructor() {\n        this.visitedCellStack = [];\n    }\n\n    evaluateCellAt(position, cell, environment) {\n        if (this.visitedCellStack.includes(position))\n            throw new RuntimeError(`Circular reference detected (${this.visitedCellStack.join(' -> ')} -> ${position})`);\n\n        this.visitedCellStack.push(position);\n        const result = this._evaluateCell(cell, environment);\n        this.visitedCellStack.pop();\n        return result;\n    }\n\n    evaluateQuery(cell, environment) {\n        return this._evaluateCell(cell, environment);\n    }\n\n    _evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case CellReference:\n                return this._evaluateCellReference(cell.position, environment);\n            case Reference:\n                return environment.getGlobal(cell.name, environment);\n            case UnaryOp:\n                return this._evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(cell.functionValue, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    _evaluateCellReference(position, environment) {\n        try {\n            return environment.getValue(position);\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced cell ${position}`);\n            else throw e;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionValue, args, environment) {\n        const func = this._evaluateCell(functionValue, environment);\n        if (typeof func !== 'function')\n            throw new RuntimeError(`'${functionValue}' is called like a function, but is of type '${typeof (func)}' with value '${func}'.`);\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        try {\n            return func(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionValue}: ${ex}`);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from.position, to.position)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateCellReference(pos, environment));\n    }\n}","export default class ReferencesMap {\n    constructor() {\n        this._referencesFrom = {};\n        this._referencesTo = {};\n    }\n\n    getReferencesFrom(position) { return this._referencesFrom[position]; }\n    getReferencesTo(position) { return this._referencesTo[position]; }\n\n    addReference(positionFrom, referenceTo) {\n        if (!this._referencesFrom[positionFrom])\n            this._referencesFrom[positionFrom] = [];\n        this._referencesFrom[positionFrom].push(referenceTo);\n\n        if (!this._referencesTo[referenceTo])\n            this._referencesTo[referenceTo] = [];\n        this._referencesTo[referenceTo].push(positionFrom);\n    }\n\n    removeReferencesFrom(position) {\n        const targetNodes = this._referencesFrom[position];\n        for (let target of targetNodes) {\n            const valueIndex = this._referencesTo[target].indexOf(position);\n            if (valueIndex > -1) this._referencesTo[target].splice(valueIndex, 1);\n        }\n        delete this._referencesFrom[position];\n    }\n\n    getAffectedCells(position) {\n        // TODO: maybe optimize using stack and for loop\n        const referencesTo = this.getReferencesTo(position);\n        if (!referencesTo) return [];\n\n        const recursiveReferences = referencesTo.flatMap(this.getAffectedCells.bind(this));\n        return [...referencesTo, ...recursiveReferences];\n    }\n}","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells = {}, globals = {}, cellsChangedListener = (() => { })) {\n        this.cells = cells;\n        this.globals = globals;\n        this.cellsChangedListener = cellsChangedListener;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = {}; // position => expression tree\n        this._valuesCache = {}; // position => value;\n        this._referencesMap = new ReferencesMap();\n    }\n\n    getText(position) {\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells[position] = value;\n\n        const affectedCells = [position, ...this._referencesMap.getAffectedCells(position)];\n        for (let pos of affectedCells)\n            delete this._valuesCache[pos];\n\n        delete this._expressionsCache[position];\n        if (this._referencesMap.getReferencesFrom(position))\n            this._referencesMap.removeReferencesFrom(position);\n\n        this.cellsChangedListener(affectedCells);\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.hasOwnProperty(position))\n            return this._expressionsCache[position];\n\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\n        const { parsed, references } = this._parser.parse(text);\n        this._expressionsCache[position] = parsed;\n\n        for (let reference of references)\n            this._referencesMap.addReference(position, reference);\n\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.hasOwnProperty(position))\n            return this._valuesCache[position];\n\n        const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._valuesCache[position] = result;\n        return result;\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getGlobal(name) {\n        if (this.globals[name] === undefined)\n            throw new RuntimeError(`Unknown global value: ${name}`);\n        return this.globals[name];\n    }\n};","export const builtinValues = {\n    SUM: (...args) => {\n        let sum = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number')\n                sum += arg;\n            else if (!(arg === null || arg === undefined))\n                throw new Error(`${typeof (arg)} is not a valid argument to SUM(). Expected number, number[], null or undefined.`);\n        }\n        return sum;\n    },\n\n    AVERAGE: (...args) => {\n        let sum = 0;\n        let count = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number') {\n                sum += arg;\n                count++;\n            } else if (!(arg === null || arg === undefined)) {\n                throw new Error(`${typeof (arg)} is not a valid argument to AVERAGE().`);\n            }\n        }\n        return sum / count;\n    },\n};","import { Environment } from './environment';\nimport { builtinValues } from './builtinValues';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\nexport { builtinValues };\n\nexport class Spreadsheet {\n    constructor(cells = {}, globals = builtinValues, cellsChangedListener) {\n        this.cells = cells;\n        this._environment = new Environment(this.cells, globals, cellsChangedListener);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["SpreadsheetError","Error","ParsingError","[object Object]","message","super","this","RuntimeError","TokenStream","tokens","_tokens","_currentPos","types","token","peek","includes","type","expect","join","TokenType","Object","freeze","EOF","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","REFERENCE","IDENTIFIER","Tokenizer","_rules","pattern","text","remaining","length","_nextToken","push","slice","value","filter","rule","match","Expression","Value","constructor","String","CellReference","position","Reference","name","BinaryOp","left","op","right","UnaryOp","FunctionCall","functionValue","args","Range","from","to","positionsInRange","positions","fromPos","parsePosition","toPos","col","_range","columnIndex","row","columnLetter","Array","_","i","positionParts","parseInt","makePosition","colLetter","charCodeAt","colIndex","fromCharCode","Parser","tokenizer","_tokenizer","parsed","references","trimStart","startsWith","tokenize","require","_parseExpression","Set","_getCellReferences","parseFloat","_parseTerm","operation","_parseFactor","_parseRange","_parseUnary","_parseCall","_parseValue","_parseArguments","number","_parseNumber","string","_parseString","reference","_finishRangeReference","_parseCellReference","identifier","_finishParenthesized","contents","escapedString","substring","replace","fromReference","toReference","parsedPos","Helpers.parsePosition","Helpers.makePosition","expression","flatMap","arg","Helpers.positionsInRange","map","pos","Evaluator","visitedCellStack","cell","environment","result","_evaluateCell","pop","_evaluateCellReference","getGlobal","_evaluateUnary","_evaluateBinary","_evaluateFunction","getValue","e","_evaluateRange","leftValue","rightValue","func","argumentValues","_evaluateExpression","ex","ReferencesMap","_referencesFrom","_referencesTo","positionFrom","referenceTo","targetNodes","target","valueIndex","indexOf","splice","referencesTo","getReferencesTo","recursiveReferences","getAffectedCells","bind","Environment","cells","globals","cellsChangedListener","_parser","_evaluator","_expressionsCache","_valuesCache","_referencesMap","hasOwnProperty","toString","affectedCells","getReferencesFrom","removeReferencesFrom","parse","addReference","evaluateCellAt","getExpression","evaluateQuery","undefined","builtinValues","SUM","sum","flat","AVERAGE","count","Spreadsheet","_environment","getText","setText"],"mappings":"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"}