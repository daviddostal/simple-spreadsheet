{"version":3,"file":"simple-spreadsheet.min.js","sources":["../src/errors.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/environment.js","../src/functions.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\r\n\r\nexport class ParsingError extends SpreadsheetError {\r\n    constructor(message) { super(message); }\r\n    toString() { return `Syntax error: ${this.message}`; }\r\n}\r\n\r\nexport class RuntimeError extends SpreadsheetError {\r\n    constructor(message) { super(message); }\r\n    toString() { return `Evaluation error: ${this.message}`; }\r\n}\r\n","import { ParsingError } from './errors';\r\n\r\nexport const TokenType = Object.freeze({\r\n    EOF: 'EOF',\r\n    WHITESPACE: 'WHITESPACE',\r\n    PLUS: 'PLUS',\r\n    MINUS: 'MINUS',\r\n    STAR: 'STAR',\r\n    SLASH: 'SLASH',\r\n    LPAREN: 'LPAREN',\r\n    RPAREN: 'RPAREN',\r\n    COLON: 'COLON',\r\n    EQUALS: 'EQUALS',\r\n    COMMA: 'COMMA',\r\n    NUMBER: 'NUMBER',\r\n    STRING: 'STRING',\r\n    IDENTIFIER: 'IDENTIFIER',\r\n});\r\n\r\nexport class Tokenizer {\r\n    constructor() {\r\n        this.rules = {\r\n            // NUMBER and IDENTIFIER are used the most so keep them at the top\r\n            '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\r\n            '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\r\n            '\\\\s+': TokenType.WHITESPACE,\r\n            '\\\\+': TokenType.PLUS,\r\n            '-': TokenType.MINUS,\r\n            '\\\\*': TokenType.STAR,\r\n            '\\\\/': TokenType.SLASH,\r\n            '\\\\(': TokenType.LPAREN,\r\n            '\\\\)': TokenType.RPAREN,\r\n            '=': TokenType.EQUALS,\r\n            ':': TokenType.COLON,\r\n            ',': TokenType.COMMA,\r\n            '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\r\n            '$': TokenType.EOF,\r\n        };\r\n    }\r\n\r\n    begin(str) {\r\n        this.remaining = str;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        const next = this.peek();\r\n        this.remaining = this.remaining.slice(next.value.length);\r\n        return next;\r\n    }\r\n\r\n    peek() {\r\n        for (let rule in this.rules) {\r\n            const match = this.remaining.match(new RegExp('^' + rule));\r\n            if (match !== null) {\r\n                return { type: this.rules[rule], value: match[0] };\r\n            }\r\n        }\r\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\r\n    }\r\n\r\n    rest() {\r\n        const rest = this.remaining;\r\n        this.remaining = \"\";\r\n        return rest;\r\n    }\r\n}\r\n","export class Expression { }\r\n\r\nexport class Value extends Expression {\r\n    constructor(value) { super(); this.value = value; }\r\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\r\n}\r\n\r\nexport class Reference extends Expression {\r\n    constructor(col, row) { super(); this.col = col; this.row = row; }\r\n    toString() { return `Reference(${this.col}${this.row})`; }\r\n}\r\n\r\nexport class BinaryOp extends Expression {\r\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\r\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\r\n}\r\n\r\nexport class UnaryOp extends Expression {\r\n    constructor(op, value) { super(); this.op = op; this.value = value; }\r\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\r\n}\r\n\r\nexport class FunctionCall extends Expression {\r\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\r\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\r\n}\r\n\r\nexport class Range extends Expression {\r\n    constructor(from, to) { super(); this.from = from; this.to = to; }\r\n    toString() { return `Range(${this.from}, ${this.to})`; }\r\n}","export function positionsInRange(from, to) {\r\n    const positions = [];\r\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\r\n        for (let row of _range(from.row, to.row))\r\n            positions.push({ col: columnLetter(col), row: row });\r\n    return positions;\r\n}\r\n\r\nfunction _range(from, to) {\r\n    return from <= to\r\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\r\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\r\n}\r\n\r\nexport function parseRange(range) {\r\n    const [from, to] = range.split(':');\r\n    return { from: parsePosition(from), to: parsePosition(to) };\r\n}\r\n\r\nexport function makeRange(from, to) {\r\n    return `${from}:${to}`;\r\n}\r\n\r\nexport function parsePosition(position) {\r\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\r\n    return positionParts === null ? null :\r\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\r\n}\r\n\r\nexport function makePosition(col, row) {\r\n    return `${col}${row}`;\r\n}\r\n\r\nexport function columnIndex(colLetter) {\r\n    return colLetter.charCodeAt(0) - 65;\r\n}\r\n\r\nexport function columnLetter(colIndex) {\r\n    return String.fromCharCode(colIndex + 65);\r\n}","import { TokenType } from './tokenizer';\r\nimport { ParsingError } from './errors';\r\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\r\nimport * as Helpers from './helpers';\r\n\r\nexport default class Parser {\r\n    constructor(tokenizer) {\r\n        this.tokens = tokenizer;\r\n    }\r\n\r\n    parse(text) {\r\n        if (text === null || text === undefined || text.constructor !== String)\r\n            return new Value(text); // if there is nothing to parse, return the value.\r\n\r\n        this.tokens.begin(text);\r\n        const result = this.parseCell();\r\n        return result;\r\n    }\r\n\r\n    // Cell -> Expression | simple value (string or number)\r\n    parseCell() {\r\n        if (this.tokens.remaining.startsWith('=')) {\r\n            this._expectAny(TokenType.EQUALS);\r\n            const result = this.parseExpression();\r\n            this._require(TokenType.EOF);\r\n            return result;\r\n        } else {\r\n            const value = this.tokens.rest();\r\n            if (value.match(/^[+-]?\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\r\n            else return new Value(value);\r\n        }\r\n    }\r\n\r\n    // Expression -> Factor\r\n    parseExpression() {\r\n        return this.parseTerm();\r\n    }\r\n\r\n    // Term -> Factor ([+-] Factor)*\r\n    parseTerm() {\r\n        let left = this.parseFactor();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseFactor());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Factor -> Unary ([*/] Unary)*\r\n    parseFactor() {\r\n        let left = this.parseUnary();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseUnary());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Unary -> [+-] Unary | Value\r\n    parseUnary() {\r\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\r\n        return operation !== null\r\n            ? new UnaryOp(operation.value, this.parseUnary())\r\n            : this.parseValue();\r\n    }\r\n\r\n    // Value -> Identifier | number | string | ( Expression ) | RangeReference\r\n    parseValue() {\r\n        // Parenthesized expression\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            const contents = this.parseExpression();\r\n            this._require(TokenType.RPAREN);\r\n            return contents;\r\n        }\r\n\r\n        // Number\r\n        const number = this._expectAny(TokenType.NUMBER)\r\n        if (number !== null) { return new Value(parseFloat(number.value)); }\r\n\r\n        // String\r\n        const string = this._expectAny(TokenType.STRING);\r\n        if (string !== null) {\r\n            const withoutQuotes = string.value.substring(1, string.value.length - 1);\r\n            const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\r\n            return new Value(escapedString);\r\n        }\r\n\r\n        const identifier = this._require(TokenType.IDENTIFIER);\r\n        // Range\r\n        if (identifier !== null && this._expectAny(TokenType.COLON)) {\r\n            const endIdentifier = this._require(TokenType.IDENTIFIER);\r\n            const from = this._parseReference(identifier.value);\r\n            const to = this._parseReference(endIdentifier.value);\r\n            return new Range(from, to);\r\n        }\r\n\r\n        // Function call\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            let value = identifier.value;\r\n            do {\r\n                const args = this.parseArguments();\r\n                value = new FunctionCall(value, args);\r\n            } while (this._expectAny(TokenType.LPAREN))\r\n            return value;\r\n        }\r\n\r\n        // Reference\r\n        return this._parseReference(identifier.value);\r\n    }\r\n\r\n    // Reference -> [A-Za-z]+\\d+\r\n    _parseReference(reference) {\r\n        const position = Helpers.parsePosition(reference);\r\n        if (position === null)\r\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\r\n        return new Reference(position.col, position.row);\r\n    }\r\n\r\n    // Arguments -> (Expression (, Expression)*)?\r\n    parseArguments() {\r\n        const args = [];\r\n        while (!this._expectAny(TokenType.RPAREN)) {\r\n            if (args.length != 0)\r\n                this._require(TokenType.COMMA);\r\n            args.push(this.parseExpression());\r\n        }\r\n        return args;\r\n    }\r\n\r\n    _expectAny(...types) {\r\n        const current = this._next();\r\n        if (types.includes(current.type)) {\r\n            this.tokens.next();\r\n            return current;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _require(type) {\r\n        const next = this._expectAny(type);\r\n        if (next === null)\r\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\r\n        else\r\n            return next;\r\n    }\r\n\r\n    _next() {\r\n        let current = this.tokens.peek();\r\n        while (current.type === TokenType.WHITESPACE) {\r\n            this.tokens.next();\r\n            current = this.tokens.peek();\r\n        }\r\n        return current;\r\n    }\r\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\r\nimport { RuntimeError, ParsingError } from './errors';\r\nimport * as Helpers from './helpers';\r\n\r\nexport default class Evaluator {\r\n    evaluateCell(cell, environment) {\r\n        switch (cell.constructor) {\r\n            case Value:\r\n                return cell.value;\r\n            case Reference:\r\n                return this.evaluateReference(Helpers.makePosition(cell.col, cell.row), environment);\r\n            case UnaryOp:\r\n                return this.evaluateUnary(cell.op, cell.value, environment);\r\n            case BinaryOp:\r\n                return this.evaluateBinary(cell.left, cell.op, cell.right, environment);\r\n            case FunctionCall:\r\n                return this.evaluateFunction(cell.functionName, cell.args, environment);\r\n            case Range:\r\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\r\n            default:\r\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\r\n        }\r\n    }\r\n\r\n    evaluateReference(position, environment) {\r\n        try {\r\n            const entry = environment.getExpression(position) || new Value(null);\r\n            return this.evaluateCell(entry, environment);\r\n        } catch (e) {\r\n            if (e instanceof ParsingError)\r\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\r\n            else throw e;\r\n        }\r\n    }\r\n\r\n    evaluateExpression(value, environment) {\r\n        switch (value.constructor) {\r\n            case Range: return this.evaluateRange(value.from, value.to, environment);\r\n            default: return this.evaluateCell(value, environment);\r\n        }\r\n    }\r\n\r\n    evaluateUnary(op, expression, environment) {\r\n        const value = this.evaluateCell(expression, environment);\r\n        switch (op) {\r\n            case '+': return value;\r\n            case '-': return -value;\r\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateBinary(left, op, right, environment) {\r\n        const leftValue = this.evaluateCell(left, environment);\r\n        const rightValue = this.evaluateCell(right, environment);\r\n        switch (op) {\r\n            case '+': return leftValue + rightValue;\r\n            case '-': return leftValue - rightValue;\r\n            case '*': return leftValue * rightValue;\r\n            case '/': return leftValue / rightValue;\r\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateFunction(functionName, args, environment) {\r\n        const argumentValues = args.map(arg => this.evaluateExpression(arg, environment));\r\n        const func = environment.getFunction(functionName);\r\n        try {\r\n            return func(...argumentValues);\r\n        } catch (ex) {\r\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\r\n        }\r\n    }\r\n\r\n    evaluateRange(from, to, environment) {\r\n        const cells = Helpers.positionsInRange(from, to)\r\n            .map(pos => new Reference(pos.col, pos.row));\r\n        return cells.map(cell => this.evaluateCell(cell, environment));\r\n    }\r\n}\r\n","import { Tokenizer } from './tokenizer';\r\nimport Parser from './parser';\r\nimport Evaluator from './evaluator';\r\nimport { RuntimeError } from './errors';\r\n\r\nexport class Environment {\r\n    constructor(cells = {}, builtinFunctions = {}) {\r\n        this.cells = cells;\r\n        this.functions = builtinFunctions;\r\n        this._parser = new Parser(new Tokenizer());\r\n        this._evaluator = new Evaluator();\r\n        this._expressionsCache = {};\r\n        // caching values assumes the spreadsheet cells don't change\r\n        this._valuesCache = {};\r\n    }\r\n\r\n    getText(position) {\r\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\r\n    }\r\n\r\n    getExpression(position) {\r\n        if (this._expressionsCache.hasOwnProperty(position))\r\n            return this._expressionsCache[position];\r\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\r\n        const parsed = this._parser.parse(text);\r\n        this._expressionsCache[position] = parsed;\r\n        return parsed;\r\n    }\r\n\r\n    getValue(position) {\r\n        if (this._valuesCache.hasOwnProperty(position))\r\n            return this._valuesCache[position];\r\n        const value = this._evaluator.evaluateCell(this.getExpression(position), this);\r\n        this._valuesCache[position] = value;\r\n        return value;\r\n    }\r\n\r\n    evaluateExpression(expression) {\r\n        const parsed = this._parser.parse(expression);\r\n        const evaluated = this._evaluator.evaluateCell(parsed, this);\r\n        return evaluated;\r\n    }\r\n\r\n    getFunction(name) {\r\n        if (this.functions[name] === undefined)\r\n            throw new RuntimeError(`Unknown function: ${name} is not a function`);\r\n        return this.functions[name];\r\n    }\r\n};","export const builtinFunctions = {\r\n    SUM: (...values) => values.flat().reduce((a, b) => a + b, 0),\r\n    AVERAGE: (...values) => values.flat().reduce((a, b) => a + b, 0) / values.flat().length,\r\n};","import { Environment } from './environment';\r\nimport { builtinFunctions } from './functions';\r\nimport * as Helpers from './helpers';\r\nexport { Helpers };\r\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\r\nexport { builtinFunctions };\r\n\r\nexport class Spreadsheet {\r\n    constructor(cells = {}, functions = builtinFunctions) {\r\n        this.cells = cells;\r\n        this.builtinFunctions = functions;\r\n        this.environment = new Environment(this.cells, this.builtinFunctions);\r\n    }\r\n\r\n    text(position) {\r\n        return this.environment.getText(position);\r\n    }\r\n\r\n    value(position) {\r\n        return this.environment.getValue(position);\r\n    }\r\n\r\n    query(expression) {\r\n        return this.environment.evaluateExpression(expression);\r\n    }\r\n}"],"names":["SpreadsheetError","Error","ParsingError","[object Object]","message","super","this","RuntimeError","TokenType","Object","freeze","EOF","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","IDENTIFIER","Tokenizer","rules","\\d+(?:\\.\\d+)?","[a-zA-Z]\\w+","\\s+","\\+","-","\\*","\\/","\\(","\\)","=",":",",","\\\"(?:[^\"\\\\]|\\\\.)*\\\"","$","str","remaining","next","peek","slice","value","length","rule","match","RegExp","type","rest","Expression","Value","constructor","String","Reference","col","row","BinaryOp","left","op","right","UnaryOp","FunctionCall","functionName","args","join","Range","from","to","positionsInRange","positions","_range","columnIndex","push","columnLetter","Array","_","i","parsePosition","position","positionParts","parseInt","makePosition","colLetter","charCodeAt","colIndex","fromCharCode","range","split","Parser","tokenizer","tokens","text","begin","parseCell","startsWith","_expectAny","result","parseExpression","_require","parseFloat","parseTerm","operation","parseFactor","parseUnary","parseValue","contents","number","string","escapedString","substring","replace","identifier","endIdentifier","_parseReference","parseArguments","reference","Helpers.parsePosition","types","current","_next","includes","Evaluator","cell","environment","evaluateReference","Helpers.makePosition","evaluateUnary","evaluateBinary","evaluateFunction","entry","getExpression","evaluateCell","e","evaluateRange","expression","leftValue","rightValue","argumentValues","map","arg","evaluateExpression","func","getFunction","ex","Helpers.positionsInRange","pos","Environment","cells","builtinFunctions","functions","_parser","_evaluator","_expressionsCache","_valuesCache","hasOwnProperty","toString","parsed","parse","name","undefined","SUM","values","flat","reduce","a","b","AVERAGE","Spreadsheet","getText","getValue"],"mappings":"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"}