{"version":3,"sources":["webpack://SimpleSpreadsheet/webpack/bootstrap","webpack://SimpleSpreadsheet/./src/tokenizer.js","webpack://SimpleSpreadsheet/./src/expressions.js","webpack://SimpleSpreadsheet/./src/parser.js","webpack://SimpleSpreadsheet/./src/evaluator.js","webpack://SimpleSpreadsheet/./src/environment.js","webpack://SimpleSpreadsheet/./src/spreadsheet.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ParsingError","Error","[object Object]","message","super","this","TokenType","freeze","EOF","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","IDENTIFIER","Tokenizer","rules","$","\\s+","\\+","-","\\*","\\/","\\(","\\)","=",":",",","\\d+(?:\\.\\d+)?","\\\"(?:[^\"\\\\]|\\\\.)*\\\"","[a-zA-Z]\\w+","str","remaining","next","peek","slice","length","rule","match","RegExp","type","rest","Expression","Value","constructor","String","Reference","col","row","position","BinaryOp","left","op","right","UnaryOp","FunctionCall","functionName","args","join","Range","from","to","parser_Parser","tokenizer","tokens","text","begin","parseCell","startsWith","_expectAny","result","parseExpression","_require","parseFloat","parseTerm","operation","parseFactor","parseUnary","parseValue","contents","number","string","substring","identifier","endIdentifier","_parseReference","parseArguments","reference","referenceParts","parseInt","push","types","current","_next","includes","evaluator_Evaluator","cell","environment","evaluateReference","evaluateUnary","evaluateBinary","evaluateFunction","RuntimeError","entry","getExpression","evaluateCell","e","evaluateRange","expression","leftValue","rightValue","argumentValues","map","arg","evaluateExpression","func","getFunction","ex","_cellsInRange","_range","charCodeAt","fromCharCode","Array","_","environment_Environment","cells","builtinFunctions","functions","_parser","_evaluator","undefined","parse","__webpack_exports__","spreadsheet_Spreadsheet","SUM","values","flat","reduce","a","b","AVERAGE","getText","getValue"],"mappings":"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","file":"simple-spreadsheet.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export class ParsingError extends Error {\r\n    constructor(message) { super(message); }\r\n    toString() { return `ParsingError: ${this.message}`; }\r\n}\r\n\r\nexport const TokenType = Object.freeze({\r\n    EOF: 'EOF',\r\n    WHITESPACE: 'WHITESPACE',\r\n    PLUS: 'PLUS',\r\n    MINUS: 'MINUS',\r\n    STAR: 'STAR',\r\n    SLASH: 'SLASH',\r\n    LPAREN: 'LPAREN',\r\n    RPAREN: 'RPAREN',\r\n    COLON: 'COLON',\r\n    EQUALS: 'EQUALS',\r\n    COMMA: 'COMMA',\r\n    NUMBER: 'NUMBER',\r\n    STRING: 'STRING',\r\n    IDENTIFIER: 'IDENTIFIER',\r\n});\r\n\r\nexport class Tokenizer {\r\n    constructor(rules = {\r\n        '$': TokenType.EOF,\r\n        '\\\\s+': TokenType.WHITESPACE,\r\n        '\\\\+': TokenType.PLUS,\r\n        '-': TokenType.MINUS,\r\n        '\\\\*': TokenType.STAR,\r\n        '\\\\/': TokenType.SLASH,\r\n        '\\\\(': TokenType.LPAREN,\r\n        '\\\\)': TokenType.RPAREN,\r\n        '=': TokenType.EQUALS,\r\n        ':': TokenType.COLON,\r\n        ',': TokenType.COMMA,\r\n        '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\r\n        '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\r\n        '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\r\n    }) {\r\n        this.rules = rules;\r\n    }\r\n\r\n    begin(str) {\r\n        this.remaining = str;\r\n        return this;\r\n    }\r\n\r\n    next() {\r\n        const next = this.peek();\r\n        this.remaining = this.remaining.slice(next.value.length);\r\n        return next;\r\n    }\r\n\r\n    peek() {\r\n        for (let rule in this.rules) {\r\n            const match = this.remaining.match(new RegExp('^' + rule));\r\n            if (match !== null) {\r\n                return { type: this.rules[rule], value: match[0] };\r\n            }\r\n        }\r\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\r\n    }\r\n\r\n    rest() {\r\n        const rest = this.remaining;\r\n        this.remaining = \"\";\r\n        return rest;\r\n    }\r\n}","export class Expression { }\r\n\r\nexport class Value extends Expression {\r\n    constructor(value) { super(); this.value = value; }\r\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\r\n}\r\n\r\nexport class Reference extends Expression {\r\n    constructor(col, row) { super(); this.col = col; this.row = row; }\r\n    get position() { return `${this.col}${this.row}`; }\r\n    toString() { return `Reference(${this.col}${this.row})`; }\r\n}\r\n\r\nexport class BinaryOp extends Expression {\r\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\r\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\r\n}\r\n\r\nexport class UnaryOp extends Expression {\r\n    constructor(op, value) { super(); this.op = op; this.value = value; }\r\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\r\n}\r\n\r\nexport class FunctionCall extends Expression {\r\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\r\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\r\n}\r\n\r\nexport class Range extends Expression {\r\n    constructor(from, to) { super(); this.from = from; this.to = to; }\r\n    toString() { return `Range(${this.from}, ${this.to})`; }\r\n}","import { ParsingError, TokenType } from './tokenizer';\r\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\r\n\r\nexport default class Parser {\r\n    constructor(tokenizer) {\r\n        this.tokens = tokenizer;\r\n    }\r\n\r\n    parse(text) {\r\n        if (text === null) return new Value(null);\r\n        this.tokens.begin(text);\r\n        const result = this.parseCell();\r\n        return result;\r\n    }\r\n\r\n    // Cell -> Expression | simple value (string or number)\r\n    parseCell() {\r\n        if (this.tokens.remaining.startsWith('=')) {\r\n            this._expectAny(TokenType.EQUALS);\r\n            const result = this.parseExpression();\r\n            this._require(TokenType.EOF);\r\n            return result;\r\n        } else {\r\n            const value = this.tokens.rest();\r\n            if (value.match(/^\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\r\n            else return new Value(value);\r\n        }\r\n    }\r\n\r\n    // Expression -> Factor\r\n    parseExpression() {\r\n        return this.parseTerm();\r\n    }\r\n\r\n    // Term -> Factor ([+-] Factor)*\r\n    parseTerm() {\r\n        let left = this.parseFactor();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseFactor());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Factor -> Unary ([*/] Unary)*\r\n    parseFactor() {\r\n        let left = this.parseUnary();\r\n        let operation;\r\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\r\n            left = new BinaryOp(left, operation.value, this.parseUnary());\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Unary -> [+-] Unary | Value\r\n    parseUnary() {\r\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\r\n        return operation !== null\r\n            ? new UnaryOp(operation.value, this.parseUnary())\r\n            : this.parseValue();\r\n    }\r\n\r\n    // Value -> Identifier | number | string | ( Expression ) | RangeReference\r\n    parseValue() {\r\n        // Parenthesized expression\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            const contents = this.parseExpression();\r\n            this._require(TokenType.RPAREN);\r\n            return contents;\r\n        }\r\n\r\n        // Number\r\n        const number = this._expectAny(TokenType.NUMBER)\r\n        if (number !== null) { return new Value(parseFloat(number.value)); }\r\n\r\n        // String\r\n        const string = this._expectAny(TokenType.STRING);\r\n        if (string !== null) { return new Value(string.value.substring(1, string.value.length - 1)); }\r\n\r\n        const identifier = this._require(TokenType.IDENTIFIER);\r\n        // Range\r\n        if (identifier !== null && this._expectAny(TokenType.COLON)) {\r\n            const endIdentifier = this._require(TokenType.IDENTIFIER);\r\n            const from = this._parseReference(identifier.value);\r\n            const to = this._parseReference(endIdentifier.value);\r\n            if (!(from.col === to.col || from.row === to.row))\r\n                throw new ParsingError(`Range start and end not in same column or row: ${identifier.value}:${endIdentifier.value}`);\r\n            return new Range(from, to);\r\n        }\r\n\r\n        // Function call\r\n        if (this._expectAny(TokenType.LPAREN)) {\r\n            let value = identifier.value;\r\n            do {\r\n                const args = this.parseArguments();\r\n                value = new FunctionCall(value, args);\r\n            } while (this._expectAny(TokenType.LPAREN))\r\n            return value;\r\n        }\r\n\r\n        // Reference\r\n        return this._parseReference(identifier.value);\r\n    }\r\n\r\n    // Reference -> [A-Za-z]+\\d+\r\n    _parseReference(reference) {\r\n        const referenceParts = reference.match(/^([A-Za-z]+)(\\d+)$/);\r\n        if (referenceParts === null)\r\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\r\n        return new Reference(referenceParts[1], parseInt(referenceParts[2]));\r\n    }\r\n\r\n    // Arguments -> (Expression (, Expression)*)?\r\n    parseArguments() {\r\n        const args = [];\r\n        while (!this._expectAny(TokenType.RPAREN)) {\r\n            if (args.length != 0)\r\n                this._require(TokenType.COMMA);\r\n            args.push(this.parseExpression());\r\n        }\r\n        return args;\r\n    }\r\n\r\n    _expectAny(...types) {\r\n        const current = this._next();\r\n        if (types.includes(current.type)) {\r\n            this.tokens.next();\r\n            return current;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _require(type) {\r\n        const next = this._expectAny(type);\r\n        if (next === null)\r\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\r\n        else\r\n            return next;\r\n    }\r\n\r\n    _next() {\r\n        let current = this.tokens.peek();\r\n        while (current.type === TokenType.WHITESPACE) {\r\n            this.tokens.next();\r\n            current = this.tokens.peek();\r\n        }\r\n        return current;\r\n    }\r\n}","import { RuntimeError } from './environment';\r\nimport { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\r\nimport { ParsingError } from './tokenizer';\r\n\r\nexport default class Evaluator {\r\n    evaluateCell(cell, environment) {\r\n        switch (cell.constructor) {\r\n            case Value:\r\n                return cell.value;\r\n            case Reference:\r\n                return this.evaluateReference(cell.position, environment);\r\n            case UnaryOp:\r\n                return this.evaluateUnary(cell.op, cell.value, environment);\r\n            case BinaryOp:\r\n                return this.evaluateBinary(cell.left, cell.op, cell.right, environment);\r\n            case FunctionCall:\r\n                return this.evaluateFunction(cell.functionName, cell.args, environment);\r\n            case Range:\r\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\r\n            default:\r\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\r\n        }\r\n    }\r\n\r\n    evaluateReference(position, environment) {\r\n        try {\r\n            const entry = environment.getExpression(position) || new Value(null);\r\n            return this.evaluateCell(entry, environment);\r\n        } catch (e) {\r\n            if (e instanceof ParsingError)\r\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\r\n            else throw e;\r\n        }\r\n    }\r\n\r\n    evaluateExpression(value, environment) {\r\n        switch (value.constructor) {\r\n            case Range: return this.evaluateRange(value.from, value.to, environment);\r\n            default: return this.evaluateCell(value, environment);\r\n        }\r\n    }\r\n\r\n    evaluateUnary(op, expression, environment) {\r\n        const value = this.evaluateCell(expression, environment);\r\n        switch (op) {\r\n            case '+': return value;\r\n            case '-': return -value;\r\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateBinary(left, op, right, environment) {\r\n        const leftValue = this.evaluateCell(left, environment);\r\n        const rightValue = this.evaluateCell(right, environment);\r\n        switch (op) {\r\n            case '+': return leftValue + rightValue;\r\n            case '-': return leftValue - rightValue;\r\n            case '*': return leftValue * rightValue;\r\n            case '/': return leftValue / rightValue;\r\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\r\n        }\r\n    }\r\n\r\n    evaluateFunction(functionName, args, environment) {\r\n        const argumentValues = args.map(arg => this.evaluateExpression(arg, environment));\r\n        const func = environment.getFunction(functionName);\r\n        try {\r\n            return func(...argumentValues);\r\n        } catch (ex) {\r\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\r\n        }\r\n    }\r\n\r\n    evaluateRange(from, to, environment) {\r\n        const cells = this._cellsInRange(from, to);\r\n        const cellValues = cells.map(cell => this.evaluateCell(cell, environment));\r\n        return cellValues;\r\n    }\r\n\r\n    _cellsInRange(from, to) {\r\n        if (from.col === to.col)\r\n            return this._range(from.row, to.row)\r\n                .map(row => new Reference(from.col, row));\r\n        else if (from.row === to.row)\r\n            return this._range(from.col.charCodeAt(0), to.col.charCodeAt(0))\r\n                .map(col => new Reference(String.fromCharCode(col), from.row));\r\n        else\r\n            throw new RuntimeError(`Range must be in same row or column. From: ${from}, To: ${to}`);\r\n    }\r\n\r\n    _range(from, to) {\r\n        return from <= to\r\n            ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\r\n            : Array.from({ length: from - to + 1 }, (_, i) => from - i);\r\n    }\r\n}\r\n","import { Tokenizer, ParsingError } from './tokenizer';\r\nimport Parser from './parser';\r\nimport Evaluator from './evaluator';\r\n\r\nexport class RuntimeError extends Error {\r\n    constructor(message) { super(message); }\r\n    toString() { return `RuntimeError: ${this.message}`; }\r\n}\r\n\r\nexport class Environment {\r\n    constructor(cells = {}, builtinFunctions = {}) {\r\n        this.cells = cells;\r\n        this.functions = builtinFunctions;\r\n        this._parser = new Parser(new Tokenizer());\r\n        this._evaluator = new Evaluator();\r\n    }\r\n\r\n    getText(position) {\r\n        return this.cells[position] === undefined ? \"\" : this.cells[position];\r\n    }\r\n\r\n    getExpression(position) {\r\n        const value = this.cells[position] === undefined ? null : this.cells[position];\r\n        return this._parser.parse(value);\r\n    }\r\n\r\n    getValue(position) {\r\n        return this._evaluator.evaluateCell(this.getExpression(position), this);\r\n    }\r\n\r\n    getFunction(name) {\r\n        if (this.functions[name] === undefined)\r\n            throw new Error(`Unknown function: ${name}`);\r\n        return this.functions[name];\r\n    }\r\n};","import { Environment } from './environment';\r\nexport { RuntimeError } from './environment';\r\nexport { ParsingError } from './tokenizer';\r\n\r\nexport class Spreadsheet {\r\n    constructor(cells = {}) {\r\n        this.cells = cells;\r\n\r\n        this.builtinFunctions = {\r\n            SUM: (...values) => values.flat().reduce((a, b) => a + b, 0),\r\n            AVERAGE: (...values) => values.flat().reduce((a, b) => a + b, 0) / values.flat().length,\r\n        };\r\n\r\n        this.environment = new Environment(cells, this.builtinFunctions);\r\n    }\r\n\r\n    text(position) {\r\n        return this.environment.getText(position);\r\n    }\r\n\r\n    value(position) {\r\n        return this.environment.getValue(position);\r\n    }\r\n}"],"sourceRoot":""}