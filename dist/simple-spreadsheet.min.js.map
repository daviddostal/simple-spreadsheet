{"version":3,"file":"simple-spreadsheet.min.js","sources":["../src/errors.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/environment.js","../src/functions.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from './errors';\n\nexport const TokenType = Object.freeze({\n    EOF: 'EOF',\n    WHITESPACE: 'WHITESPACE',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    STAR: 'STAR',\n    SLASH: 'SLASH',\n    LPAREN: 'LPAREN',\n    RPAREN: 'RPAREN',\n    COLON: 'COLON',\n    EQUALS: 'EQUALS',\n    COMMA: 'COMMA',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    IDENTIFIER: 'IDENTIFIER',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this.rules = {\n            // NUMBER and IDENTIFIER are used the most so keep them at the top\n            '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\n            '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\n            '\\\\s+': TokenType.WHITESPACE,\n            '\\\\+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '\\\\*': TokenType.STAR,\n            '\\\\/': TokenType.SLASH,\n            '\\\\(': TokenType.LPAREN,\n            '\\\\)': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n            '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\n            '$': TokenType.EOF,\n        };\n    }\n\n    begin(str) {\n        this.remaining = str;\n        return this;\n    }\n\n    next() {\n        const next = this.peek();\n        this.remaining = this.remaining.slice(next.value.length);\n        return next;\n    }\n\n    peek() {\n        for (let rule in this.rules) {\n            const match = this.remaining.match(new RegExp('^' + rule));\n            if (match !== null) {\n                return { type: this.rules[rule], value: match[0] };\n            }\n        }\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\n    }\n\n    rest() {\n        const rest = this.remaining;\n        this.remaining = \"\";\n        return rest;\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `Reference(${this.col}${this.row})`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `Range(${this.from}, ${this.to})`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parseRange(range) {\n    const [from, to] = range.split(':');\n    return { from: parsePosition(from), to: parsePosition(to) };\n}\n\nexport function makeRange(from, to) {\n    return `${from}:${to}`;\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts === null ? null :\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this.tokens = tokenizer;\n    }\n\n    parse(text) {\n        if (text === null || text === undefined || text.constructor !== String)\n            return new Value(text); // if there is nothing to parse, return the value.\n\n        this.tokens.begin(text);\n        const result = this.parseCell();\n        return result;\n    }\n\n    // Cell => '=' Expression | SimpleValue\n    parseCell() {\n        if (this.tokens.remaining.startsWith('=')) {\n            this._expectAny(TokenType.EQUALS);\n            const result = this.parseExpression();\n            this._require(TokenType.EOF);\n            return result;\n        } else {\n            return this.parseSimpleValue();\n        }\n    }\n\n    // SimpleValue => number | text\n    parseSimpleValue() {\n        const value = this.tokens.rest();\n        if (value.match(/^[+-]?\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\n        else return new Value(value);\n    }\n\n    // Expression => Term\n    parseExpression() {\n        return this.parseTerm();\n    }\n\n    // Term => Factor ([+-] Factor)*\n    parseTerm() {\n        let left = this.parseFactor();\n        let operation;\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseFactor());\n        }\n        return left;\n    }\n\n    // Factor => Unary ([*/] Unary)*\n    parseFactor() {\n        let left = this.parseUnary();\n        let operation;\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseUnary());\n        }\n        return left;\n    }\n\n    // Unary => [+-] Unary | Value\n    parseUnary() {\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this.parseUnary())\n            : this.parseValue();\n    }\n\n    // Value => Parenthesized | number | string | RangeReference | FunctionCall | Reference\n    parseValue() {\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseParenthesized();\n\n        const number = this._expectAny(TokenType.NUMBER)\n        if (number !== null)\n            return this._parseNumber(number);\n\n        const string = this._expectAny(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._require(TokenType.IDENTIFIER);\n\n        if (identifier !== null && this._expectAny(TokenType.COLON))\n            return this._parseRangeReference(identifier);\n\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseFunctionCall(identifier);\n\n        return this._parseReference(identifier.value);\n    }\n\n    // Parenthesized => ( Expression )\n    _parseParenthesized() {\n        // ( is already parsed by parseValue\n        const contents = this.parseExpression();\n        this._require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseNumber(number) {\n        return new Value(parseFloat(number.value));\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // RangeReference => identifier ':' identifier\n    _parseRangeReference(identifier) {\n        // start identifier and : are already parsed\n        const endIdentifier = this._require(TokenType.IDENTIFIER);\n        const from = this._parseReference(identifier.value);\n        const to = this._parseReference(endIdentifier.value);\n        return new Range(from, to);\n    }\n\n    // FunctionCall => identifier ( '(' Arguments ')' )*\n    _parseFunctionCall(identifier) {\n        // function name identifier is already parsed\n        let value = identifier.value;\n        do {\n            const args = this.parseArguments();\n            value = new FunctionCall(value, args);\n        } while (this._expectAny(TokenType.LPAREN))\n        return value;\n    }\n\n    // Reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // Arguments => (Expression (',' Expression)*)?\n    parseArguments() {\n        const args = [];\n        while (!this._expectAny(TokenType.RPAREN)) {\n            if (args.length != 0)\n                this._require(TokenType.COMMA);\n            args.push(this.parseExpression());\n        }\n        return args;\n    }\n\n    _expectAny(...types) {\n        const current = this._next();\n        if (types.includes(current.type)) {\n            this.tokens.next();\n            return current;\n        } else {\n            return null;\n        }\n    }\n\n    _require(type) {\n        const next = this._expectAny(type);\n        if (next === null)\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\n        else\n            return next;\n    }\n\n    _next() {\n        let current = this.tokens.peek();\n        while (current.type === TokenType.WHITESPACE) {\n            this.tokens.next();\n            current = this.tokens.peek();\n        }\n        return current;\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nexport default class Evaluator {\n    evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case Reference:\n                return this.evaluateReference(Helpers.makePosition(cell.col, cell.row), environment);\n            case UnaryOp:\n                return this.evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this.evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this.evaluateFunction(cell.functionName, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    evaluateReference(position, environment) {\n        try {\n            const entry = environment.getExpression(position) || new Value(null);\n            return this.evaluateCell(entry, environment);\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\n            else throw e;\n        }\n    }\n\n    evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this.evaluateRange(value.from, value.to, environment);\n            default: return this.evaluateCell(value, environment);\n        }\n    }\n\n    evaluateUnary(op, expression, environment) {\n        const value = this.evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    evaluateBinary(left, op, right, environment) {\n        const leftValue = this.evaluateCell(left, environment);\n        const rightValue = this.evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    evaluateFunction(functionName, args, environment) {\n        const argumentValues = args.map(arg => this.evaluateExpression(arg, environment));\n        const func = environment.getFunction(functionName);\n        try {\n            return func(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\n        }\n    }\n\n    evaluateRange(from, to, environment) {\n        const cells = Helpers.positionsInRange(from, to)\n            .map(pos => new Reference(pos.col, pos.row));\n        return cells.map(cell => this.evaluateCell(cell, environment));\n    }\n}\n","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\n\nexport class Environment {\n    constructor(cells = {}, builtinFunctions = {}) {\n        this.cells = cells;\n        this.functions = builtinFunctions;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n        this._expressionsCache = {};\n        // caching values assumes the spreadsheet cells don't change\n        this._valuesCache = {};\n    }\n\n    getText(position) {\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.hasOwnProperty(position))\n            return this._expressionsCache[position];\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\n        const parsed = this._parser.parse(text);\n        this._expressionsCache[position] = parsed;\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.hasOwnProperty(position))\n            return this._valuesCache[position];\n        const value = this._evaluator.evaluateCell(this.getExpression(position), this);\n        this._valuesCache[position] = value;\n        return value;\n    }\n\n    evaluateExpression(expression) {\n        const parsed = this._parser.parse(expression);\n        const evaluated = this._evaluator.evaluateCell(parsed, this);\n        return evaluated;\n    }\n\n    getFunction(name) {\n        if (this.functions[name] === undefined)\n            throw new RuntimeError(`Unknown function: ${name} is not a function`);\n        return this.functions[name];\n    }\n};","export const builtinFunctions = {\n    SUM: (...values) => values.flat().reduce((a, b) => a + b, 0),\n    AVERAGE: (...values) => values.flat().reduce((a, b) => a + b, 0) / values.flat().length,\n};","import { Environment } from './environment';\nimport { builtinFunctions } from './functions';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\nexport { builtinFunctions };\n\nexport class Spreadsheet {\n    constructor(cells = {}, functions = builtinFunctions) {\n        this.cells = cells;\n        this.builtinFunctions = functions;\n        this.environment = new Environment(this.cells, this.builtinFunctions);\n    }\n\n    text(position) {\n        return this.environment.getText(position);\n    }\n\n    value(position) {\n        return this.environment.getValue(position);\n    }\n\n    query(expression) {\n        return this.environment.evaluateExpression(expression);\n    }\n}"],"names":["SpreadsheetError","Error","ParsingError","[object Object]","message","super","this","RuntimeError","TokenType","Object","freeze","EOF","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","IDENTIFIER","Tokenizer","rules","\\d+(?:\\.\\d+)?","[a-zA-Z]\\w+","\\s+","\\+","-","\\*","\\/","\\(","\\)","=",":",",","\\\"(?:[^\"\\\\]|\\\\.)*\\\"","$","str","remaining","next","peek","slice","value","length","rule","match","RegExp","type","rest","Expression","Value","constructor","String","Reference","col","row","BinaryOp","left","op","right","UnaryOp","FunctionCall","functionName","args","join","Range","from","to","positionsInRange","positions","_range","columnIndex","push","columnLetter","Array","_","i","parsePosition","position","positionParts","parseInt","makePosition","colLetter","charCodeAt","colIndex","fromCharCode","range","split","Parser","tokenizer","tokens","text","begin","parseCell","startsWith","_expectAny","result","parseExpression","_require","parseSimpleValue","parseFloat","parseTerm","operation","parseFactor","parseUnary","parseValue","_parseParenthesized","number","_parseNumber","string","_parseString","identifier","_parseRangeReference","_parseFunctionCall","_parseReference","contents","escapedString","substring","replace","endIdentifier","parseArguments","reference","Helpers.parsePosition","types","current","_next","includes","Evaluator","cell","environment","evaluateReference","Helpers.makePosition","evaluateUnary","evaluateBinary","evaluateFunction","entry","getExpression","evaluateCell","e","evaluateRange","expression","leftValue","rightValue","argumentValues","map","arg","evaluateExpression","func","getFunction","ex","Helpers.positionsInRange","pos","Environment","cells","builtinFunctions","functions","_parser","_evaluator","_expressionsCache","_valuesCache","hasOwnProperty","toString","parsed","parse","name","undefined","SUM","values","flat","reduce","a","b","AVERAGE","Spreadsheet","getText","getValue"],"mappings":"8MAAO,MAAMA,yBAAyBC,OAE/B,MAAMC,qBAAqBF,iBAC9BG,YAAYC,GAAWC,MAAMD,GAC7BD,WAAa,uBAAwBG,KAAKF,WAGvC,MAAMG,qBAAqBP,iBAC9BG,YAAYC,GAAWC,MAAMD,GAC7BD,WAAa,2BAA4BG,KAAKF,WCP3C,MAAMI,EAAYC,OAAOC,OAAO,CACnCC,IAAK,MACLC,WAAY,aACZC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,WAAY,eAGT,MAAMC,UACTtB,cACIG,KAAKoB,MAAQ,CAETC,mBAAoBnB,EAAUc,OAC9BM,eAAgBpB,EAAUgB,WAC1BK,OAAQrB,EAAUI,WAClBkB,MAAOtB,EAAUK,KACjBkB,IAAKvB,EAAUM,MACfkB,MAAOxB,EAAUO,KACjBkB,MAAOzB,EAAUQ,MACjBkB,MAAO1B,EAAUS,OACjBkB,MAAO3B,EAAUU,OACjBkB,IAAK5B,EAAUY,OACfiB,IAAK7B,EAAUW,MACfmB,IAAK9B,EAAUa,MACfkB,4BAA6B/B,EAAUe,OACvCiB,EAAKhC,EAAUG,KAIvBR,MAAMsC,GAEF,OADAnC,KAAKoC,UAAYD,EACVnC,KAGXH,OACI,MAAMwC,EAAOrC,KAAKsC,OAElB,OADAtC,KAAKoC,UAAYpC,KAAKoC,UAAUG,MAAMF,EAAKG,MAAMC,QAC1CJ,EAGXxC,OACI,IAAK,IAAI6C,KAAQ1C,KAAKoB,MAAO,CACzB,MAAMuB,EAAQ3C,KAAKoC,UAAUO,MAAM,IAAIC,OAAO,IAAMF,IACpD,GAAc,OAAVC,EACA,MAAO,CAAEE,KAAM7C,KAAKoB,MAAMsB,GAAOF,MAAOG,EAAM,IAGtD,MAAM,IAAI/C,+BAA+BI,KAAKoC,cAGlDvC,OACI,MAAMiD,EAAO9C,KAAKoC,UAElB,OADApC,KAAKoC,UAAY,GACVU,GChER,MAAMC,YAEN,MAAMC,cAAcD,WACvBlD,YAAY2C,GAASzC,QAASC,KAAKwC,MAAQA,EAC3C3C,WAAa,OAAOG,KAAKwC,MAAMS,cAAgBC,WAAalD,KAAKwC,YAAcxC,KAAKwC,SAGjF,MAAMW,kBAAkBJ,WAC3BlD,YAAYuD,EAAKC,GAAOtD,QAASC,KAAKoD,IAAMA,EAAKpD,KAAKqD,IAAMA,EAC5DxD,WAAa,mBAAoBG,KAAKoD,MAAMpD,KAAKqD,QAG9C,MAAMC,iBAAiBP,WAC1BlD,YAAY0D,EAAMC,EAAIC,GAAS1D,QAASC,KAAKuD,KAAOA,EAAMvD,KAAKwD,GAAKA,EAAIxD,KAAKyD,MAAQA,EACrF5D,WAAa,kBAAmBG,KAAKuD,QAAQvD,KAAKwD,MAAMxD,KAAKyD,UAG1D,MAAMC,gBAAgBX,WACzBlD,YAAY2D,EAAIhB,GAASzC,QAASC,KAAKwD,GAAKA,EAAIxD,KAAKwC,MAAQA,EAC7D3C,WAAa,iBAAkBG,KAAKwD,MAAMxD,KAAKwC,UAG5C,MAAMmB,qBAAqBZ,WAC9BlD,YAAY+D,EAAcC,GAAQ9D,QAASC,KAAK4D,aAAeA,EAAc5D,KAAK6D,KAAOA,EACzFhE,WAAa,sBAAuBG,KAAK4D,iBAAiB5D,KAAK6D,KAAKC,KAAK,UAGtE,MAAMC,cAAchB,WACvBlD,YAAYmE,EAAMC,GAAMlE,QAASC,KAAKgE,KAAOA,EAAMhE,KAAKiE,GAAKA,EAC7DpE,WAAa,eAAgBG,KAAKgE,SAAShE,KAAKiE,OC7B7C,SAASC,EAAiBF,EAAMC,GACnC,MAAME,EAAY,GAClB,IAAK,IAAIf,KAAOgB,EAAOC,EAAYL,EAAKZ,KAAMiB,EAAYJ,EAAGb,MACzD,IAAK,IAAIC,KAAOe,EAAOJ,EAAKX,IAAKY,EAAGZ,KAChCc,EAAUG,KAAK,CAAElB,IAAKmB,EAAanB,GAAMC,IAAKA,IACtD,OAAOc,EAGX,SAASC,EAAOJ,EAAMC,GAClB,OAAOD,GAAQC,EACTO,MAAMR,KAAK,CAAEvB,OAAQwB,EAAKD,EAAO,GAAK,CAACS,EAAGC,IAAMA,EAAIV,GACpDQ,MAAMR,KAAK,CAAEvB,OAAQuB,EAAOC,EAAK,GAAK,CAACQ,EAAGC,IAAMV,EAAOU,GAY1D,SAASC,EAAcC,GAC1B,MAAMC,EAAgBD,EAASjC,MAAM,sBACrC,OAAyB,OAAlBkC,EAAyB,KAC5B,CAAEzB,IAAKyB,EAAc,GAAIxB,IAAKyB,SAASD,EAAc,KAGtD,SAASE,EAAa3B,EAAKC,GAC9B,SAAUD,IAAMC,IAGb,SAASgB,EAAYW,GACxB,OAAOA,EAAUC,WAAW,GAAK,GAG9B,SAASV,EAAaW,GACzB,OAAOhC,OAAOiC,aAAaD,EAAW,uDAxBnC,SAAoBE,GACvB,MAAOpB,EAAMC,GAAMmB,EAAMC,MAAM,KAC/B,MAAO,CAAErB,KAAMW,EAAcX,GAAOC,GAAIU,EAAcV,eAGnD,SAAmBD,EAAMC,GAC5B,SAAUD,KAAQC,yECfDqB,OACjBzF,YAAY0F,GACRvF,KAAKwF,OAASD,EAGlB1F,MAAM4F,GACF,GAAIA,MAAAA,GAAuCA,EAAKxC,cAAgBC,OAC5D,OAAO,IAAIF,MAAMyC,GAIrB,OAFAzF,KAAKwF,OAAOE,MAAMD,GACHzF,KAAK2F,YAKxB9F,YACI,GAAIG,KAAKwF,OAAOpD,UAAUwD,WAAW,KAAM,CACvC5F,KAAK6F,WAAW3F,EAAUY,QAC1B,MAAMgF,EAAS9F,KAAK+F,kBAEpB,OADA/F,KAAKgG,SAAS9F,EAAUG,KACjByF,EAEP,OAAO9F,KAAKiG,mBAKpBpG,mBACI,MAAM2C,EAAQxC,KAAKwF,OAAO1C,OAC1B,OAAIN,EAAMG,MAAM,wBAAgC,IAAIK,MAAMkD,WAAW1D,IACzD,IAAIQ,MAAMR,GAI1B3C,kBACI,OAAOG,KAAKmG,YAIhBtG,YACI,IACIuG,EADA7C,EAAOvD,KAAKqG,cAEhB,KAA0E,QAAlED,EAAYpG,KAAK6F,WAAW3F,EAAUK,KAAML,EAAUM,SAC1D+C,EAAO,IAAID,SAASC,EAAM6C,EAAU5D,MAAOxC,KAAKqG,eAEpD,OAAO9C,EAIX1D,cACI,IACIuG,EADA7C,EAAOvD,KAAKsG,aAEhB,KAA0E,QAAlEF,EAAYpG,KAAK6F,WAAW3F,EAAUO,KAAMP,EAAUQ,SAC1D6C,EAAO,IAAID,SAASC,EAAM6C,EAAU5D,MAAOxC,KAAKsG,cAEpD,OAAO/C,EAIX1D,aACI,IAAIuG,EAAYpG,KAAK6F,WAAW3F,EAAUK,KAAML,EAAUM,OAC1D,OAAqB,OAAd4F,EACD,IAAI1C,QAAQ0C,EAAU5D,MAAOxC,KAAKsG,cAClCtG,KAAKuG,aAIf1G,aACI,GAAIG,KAAK6F,WAAW3F,EAAUS,QAC1B,OAAOX,KAAKwG,sBAEhB,MAAMC,EAASzG,KAAK6F,WAAW3F,EAAUc,QACzC,GAAe,OAAXyF,EACA,OAAOzG,KAAK0G,aAAaD,GAE7B,MAAME,EAAS3G,KAAK6F,WAAW3F,EAAUe,QACzC,GAAe,OAAX0F,EACA,OAAO3G,KAAK4G,aAAaD,GAG7B,MAAME,EAAa7G,KAAKgG,SAAS9F,EAAUgB,YAE3C,OAAmB,OAAf2F,GAAuB7G,KAAK6F,WAAW3F,EAAUW,OAC1Cb,KAAK8G,qBAAqBD,GAEjC7G,KAAK6F,WAAW3F,EAAUS,QACnBX,KAAK+G,mBAAmBF,GAE5B7G,KAAKgH,gBAAgBH,EAAWrE,OAI3C3C,sBAEI,MAAMoH,EAAWjH,KAAK+F,kBAEtB,OADA/F,KAAKgG,SAAS9F,EAAUU,QACjBqG,EAGXpH,aAAa4G,GACT,OAAO,IAAIzD,MAAMkD,WAAWO,EAAOjE,QAGvC3C,aAAa8G,GACT,MACMO,EADgBP,EAAOnE,MAAM2E,UAAU,EAAGR,EAAOnE,MAAMC,OAAS,GAClC2E,QAAQ,SAAU,MACtD,OAAO,IAAIpE,MAAMkE,GAIrBrH,qBAAqBgH,GAEjB,MAAMQ,EAAgBrH,KAAKgG,SAAS9F,EAAUgB,YACxC8C,EAAOhE,KAAKgH,gBAAgBH,EAAWrE,OACvCyB,EAAKjE,KAAKgH,gBAAgBK,EAAc7E,OAC9C,OAAO,IAAIuB,MAAMC,EAAMC,GAI3BpE,mBAAmBgH,GAEf,IAAIrE,EAAQqE,EAAWrE,MACvB,EAAG,CACC,MAAMqB,EAAO7D,KAAKsH,iBAClB9E,EAAQ,IAAImB,aAAanB,EAAOqB,SAC3B7D,KAAK6F,WAAW3F,EAAUS,SACnC,OAAO6B,EAIX3C,gBAAgB0H,GACZ,MAAM3C,EAAW4C,EAAsBD,GACvC,GAAiB,OAAb3C,EACA,MAAM,IAAIhF,kDAAkD2H,KAChE,OAAO,IAAIpE,UAAUyB,EAASxB,IAAKwB,EAASvB,KAIhDxD,iBACI,MAAMgE,EAAO,GACb,MAAQ7D,KAAK6F,WAAW3F,EAAUU,SACX,GAAfiD,EAAKpB,QACLzC,KAAKgG,SAAS9F,EAAUa,OAC5B8C,EAAKS,KAAKtE,KAAK+F,mBAEnB,OAAOlC,EAGXhE,cAAc4H,GACV,MAAMC,EAAU1H,KAAK2H,QACrB,OAAIF,EAAMG,SAASF,EAAQ7E,OACvB7C,KAAKwF,OAAOnD,OACLqF,GAEA,KAIf7H,SAASgD,GACL,MAAMR,EAAOrC,KAAK6F,WAAWhD,GAC7B,GAAa,OAATR,EACA,MAAM,IAAIzC,yBAAyBiD,UAAa7C,KAAKwF,OAAOlD,OAAOO,gBAEnE,OAAOR,EAGfxC,QACI,IAAI6H,EAAU1H,KAAKwF,OAAOlD,OAC1B,KAAOoF,EAAQ7E,OAAS3C,EAAUI,YAC9BN,KAAKwF,OAAOnD,OACZqF,EAAU1H,KAAKwF,OAAOlD,OAE1B,OAAOoF,SC7KMG,UACjBhI,aAAaiI,EAAMC,GACf,OAAQD,EAAK7E,aACT,KAAKD,MACD,OAAO8E,EAAKtF,MAChB,KAAKW,UACD,OAAOnD,KAAKgI,kBAAkBC,EAAqBH,EAAK1E,IAAK0E,EAAKzE,KAAM0E,GAC5E,KAAKrE,QACD,OAAO1D,KAAKkI,cAAcJ,EAAKtE,GAAIsE,EAAKtF,MAAOuF,GACnD,KAAKzE,SACD,OAAOtD,KAAKmI,eAAeL,EAAKvE,KAAMuE,EAAKtE,GAAIsE,EAAKrE,MAAOsE,GAC/D,KAAKpE,aACD,OAAO3D,KAAKoI,iBAAiBN,EAAKlE,aAAckE,EAAKjE,KAAMkE,GAC/D,KAAKhE,MACD,MAAM,IAAI9D,aAAa,+DAC3B,QACI,MAAM,IAAIA,gDAAgD6H,MAItEjI,kBAAkB+E,EAAUmD,GACxB,IACI,MAAMM,EAAQN,EAAYO,cAAc1D,IAAa,IAAI5B,MAAM,MAC/D,OAAOhD,KAAKuI,aAAaF,EAAON,GAClC,MAAOS,GACL,MAAIA,aAAa5I,aACP,IAAIK,0CAA0C2E,KAC7C4D,GAInB3I,mBAAmB2C,EAAOuF,GACtB,OAAQvF,EAAMS,aACV,KAAKc,MAAO,OAAO/D,KAAKyI,cAAcjG,EAAMwB,KAAMxB,EAAMyB,GAAI8D,GAC5D,QAAS,OAAO/H,KAAKuI,aAAa/F,EAAOuF,IAIjDlI,cAAc2D,EAAIkF,EAAYX,GAC1B,MAAMvF,EAAQxC,KAAKuI,aAAaG,EAAYX,GAC5C,OAAQvE,GACJ,IAAK,IAAK,OAAOhB,EACjB,IAAK,IAAK,OAAQA,EAClB,QAAS,MAAM,IAAIvC,yCAAyCuD,OAIpE3D,eAAe0D,EAAMC,EAAIC,EAAOsE,GAC5B,MAAMY,EAAY3I,KAAKuI,aAAahF,EAAMwE,GACpCa,EAAa5I,KAAKuI,aAAa9E,EAAOsE,GAC5C,OAAQvE,GACJ,IAAK,IAAK,OAAOmF,EAAYC,EAC7B,IAAK,IAAK,OAAOD,EAAYC,EAC7B,IAAK,IAAK,OAAOD,EAAYC,EAC7B,IAAK,IAAK,OAAOD,EAAYC,EAC7B,QAAS,MAAM,IAAI3I,0CAA0CuD,OAIrE3D,iBAAiB+D,EAAcC,EAAMkE,GACjC,MAAMc,EAAiBhF,EAAKiF,IAAIC,GAAO/I,KAAKgJ,mBAAmBD,EAAKhB,IAC9DkB,EAAOlB,EAAYmB,YAAYtF,GACrC,IACI,OAAOqF,KAAQJ,GACjB,MAAOM,GACL,MAAM,IAAIlJ,kCAAkC2D,MAAiBuF,MAIrEtJ,cAAcmE,EAAMC,EAAI8D,GAGpB,OAFcqB,EAAyBpF,EAAMC,GACxC6E,IAAIO,GAAO,IAAIlG,UAAUkG,EAAIjG,IAAKiG,EAAIhG,MAC9ByF,IAAIhB,GAAQ9H,KAAKuI,aAAaT,EAAMC,KCvElD,MAAMuB,YACTzJ,YAAY0J,EAAQ,GAAIC,EAAmB,IACvCxJ,KAAKuJ,MAAQA,EACbvJ,KAAKyJ,UAAYD,EACjBxJ,KAAK0J,QAAU,IAAIpE,OAAO,IAAInE,WAC9BnB,KAAK2J,WAAa,IAAI9B,UACtB7H,KAAK4J,kBAAoB,GAEzB5J,KAAK6J,aAAe,GAGxBhK,QAAQ+E,GACJ,OAAO5E,KAAKuJ,MAAMO,eAAelF,GAAY5E,KAAKuJ,MAAM3E,GAAUmF,WAAa,GAGnFlK,cAAc+E,GACV,GAAI5E,KAAK4J,kBAAkBE,eAAelF,GACtC,OAAO5E,KAAK4J,kBAAkBhF,GAClC,MAAMa,EAAOzF,KAAKuJ,MAAMO,eAAelF,GAAY5E,KAAKuJ,MAAM3E,GAAY,KACpEoF,EAAShK,KAAK0J,QAAQO,MAAMxE,GAElC,OADAzF,KAAK4J,kBAAkBhF,GAAYoF,EAC5BA,EAGXnK,SAAS+E,GACL,GAAI5E,KAAK6J,aAAaC,eAAelF,GACjC,OAAO5E,KAAK6J,aAAajF,GAC7B,MAAMpC,EAAQxC,KAAK2J,WAAWpB,aAAavI,KAAKsI,cAAc1D,GAAW5E,MAEzE,OADAA,KAAK6J,aAAajF,GAAYpC,EACvBA,EAGX3C,mBAAmB6I,GACf,MAAMsB,EAAShK,KAAK0J,QAAQO,MAAMvB,GAElC,OADkB1I,KAAK2J,WAAWpB,aAAayB,EAAQhK,MAI3DH,YAAYqK,GACR,QAA6BC,IAAzBnK,KAAKyJ,UAAUS,GACf,MAAM,IAAIjK,kCAAkCiK,uBAChD,OAAOlK,KAAKyJ,UAAUS,UC9CjBV,EAAmB,CAC5BY,IAAK,IAAIC,IAAWA,EAAOC,OAAOC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAC1DC,QAAS,IAAIL,IAAWA,EAAOC,OAAOC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAAKJ,EAAOC,OAAO7H,0FCK9E,MAAMkI,YACT9K,YAAY0J,EAAQ,GAAIE,EAAYD,GAChCxJ,KAAKuJ,MAAQA,EACbvJ,KAAKwJ,iBAAmBC,EACxBzJ,KAAK+H,YAAc,IAAIuB,YAAYtJ,KAAKuJ,MAAOvJ,KAAKwJ,kBAGxD3J,KAAK+E,GACD,OAAO5E,KAAK+H,YAAY6C,QAAQhG,GAGpC/E,MAAM+E,GACF,OAAO5E,KAAK+H,YAAY8C,SAASjG,GAGrC/E,MAAM6I,GACF,OAAO1I,KAAK+H,YAAYiB,mBAAmBN"}