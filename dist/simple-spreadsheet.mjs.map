{"version":3,"file":"simple-spreadsheet.mjs","sources":["../src/errors.js","../src/tokenStream.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/referencesMap.js","../src/environment.js","../src/builtinValues.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from \"./errors\";\n\nexport default class TokenStream {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._currentPos = 0;\n    }\n\n    peek() {\n        return this._tokens[this._currentPos] || null;\n    }\n\n    expect(...types) {\n        const token = this.peek();\n        if (token !== null && types.includes(token.type)) {\n            this._currentPos++;\n            return token;\n        }\n        return null;\n    }\n\n    require(...types) {\n        const token = this.expect(...types);\n        if (token === null)\n            throw new ParsingError(`Expected ${types.join(' or ')}, got ${this.peek().type} instead.`);\n        return token;\n    }\n}","import { ParsingError } from './errors';\nimport TokenStream from './tokenStream';\n\nexport const TokenType = Object.freeze({\n    EOF: 'EOF',\n    WHITESPACE: 'WHITESPACE',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    STAR: 'STAR',\n    SLASH: 'SLASH',\n    LPAREN: 'LPAREN',\n    RPAREN: 'RPAREN',\n    COLON: 'COLON',\n    EQUALS: 'EQUALS',\n    COMMA: 'COMMA',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    REFERENCE: 'REFERENCE',\n    IDENTIFIER: 'IDENTIFIER',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this._rules = [\n            // NUMBER, REFERENCE and IDENTIFIER are used the most so keep them at the top\n            { pattern: /^\\d+(?:\\.\\d+)?/, type: TokenType.NUMBER },\n            { pattern: /^[A-Za-z]+\\d+/, type: TokenType.REFERENCE },\n            { pattern: /^[a-zA-Z]\\w+/, type: TokenType.IDENTIFIER },\n            { pattern: /^\\s+/, type: TokenType.WHITESPACE },\n            { pattern: /^\\+/, type: TokenType.PLUS },\n            { pattern: /^\\-/, type: TokenType.MINUS },\n            { pattern: /^\\*/, type: TokenType.STAR },\n            { pattern: /^\\//, type: TokenType.SLASH },\n            { pattern: /^\\(/, type: TokenType.LPAREN },\n            { pattern: /^\\)/, type: TokenType.RPAREN },\n            { pattern: /^=/, type: TokenType.EQUALS },\n            { pattern: /^:/, type: TokenType.COLON },\n            { pattern: /^,/, type: TokenType.COMMA },\n            { pattern: /^\\\"(?:[^\"\\\\]|\\\\.)*\\\"/, type: TokenType.STRING },\n            { pattern: /^$/, type: TokenType.EOF },\n        ];\n    }\n\n    tokenize(text) {\n        const tokens = [];\n        let remaining = text;\n        while (remaining.length > 0) {\n            const token = this._nextToken(remaining);\n            tokens.push(token);\n            remaining = remaining.slice(token.value.length);\n        }\n        tokens.push({ type: TokenType.EOF, value: '' });\n        return new TokenStream(tokens.filter(token => token.type !== TokenType.WHITESPACE));\n    }\n\n    _nextToken(text) {\n        for (let rule of this._rules) {\n            const match = text.match(rule.pattern);\n            if (match !== null)\n                return { type: rule.type, value: match[0] };\n        }\n        throw new ParsingError(`Unknown token at '${text}'`);\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class CellReference extends Expression {\n    constructor(position) { super(); this.position = position }\n    toString() { return `CellReference(${this.position})`; }\n}\n\nexport class Reference extends Expression {\n    constructor(name) { super(); this.name = name }\n    toString() { return `Reference(${this.name})`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionValue, args) { super(); this.functionValue = functionValue; this.args = args; }\n    toString() { return `FunctionCall(${this.functionValue}, [${this.args.join(', ')}])`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `Range(${this.from}, ${this.to})`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    const fromPos = parsePosition(from);\n    const toPos = parsePosition(to);\n    for (let col of _range(columnIndex(fromPos.col), columnIndex(toPos.col)))\n        for (let row of _range(fromPos.row, toPos.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts === null ? null :\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, CellReference, BinaryOp, UnaryOp, Range, FunctionCall, Reference } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this._tokenizer = tokenizer;\n        this._tokens = null;\n    }\n\n    // cell => empty | '=' expression EOF | number | string\n    parse(text) {\n        // empty cell or other value\n        if (text === null || text === undefined || text.constructor !== String)\n            return { parsed: new Value(text), references: [] };\n\n        // formula\n        if (text.trimStart().startsWith('=')) {\n            this._tokens = this._tokenizer.tokenize(text);\n            this._tokens.require(TokenType.EQUALS);\n            const parsed = this._parseExpression();\n            this._tokens.require(TokenType.EOF);\n            const references = [...new Set(this._getCellReferences(parsed))];\n            return { parsed, references };\n        }\n\n        // number\n        if (text.match(/^[+-]?\\d+(?:\\.\\d+)?$/))\n            return { parsed: new Value(parseFloat(text)), references: [] };\n\n        // string\n        return { parsed: new Value(text), references: [] };\n    }\n\n    // expression => term\n    _parseExpression() {\n        return this._parseTerm();\n    }\n\n    // term => factor (('+'|'-') factor)*\n    _parseTerm() {\n        let left = this._parseFactor();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseFactor());\n        }\n        return left;\n    }\n\n    // factor => unary (('*'|'/') unary)*\n    _parseFactor() {\n        let left = this._parseRange();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseRange());\n        }\n        return left;\n    }\n\n    // range => unary (':' unary)*\n    _parseRange() {\n        // TODO: Make ranges first-class\n        return this._parseUnary();\n    }\n\n    // unary => ('+'|'-') unary | call\n    _parseUnary() {\n        const operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this._parseUnary())\n            : this._parseCall();\n    }\n\n    // call => value ('(' arguments ')')*\n    _parseCall() {\n        let value = this._parseValue();\n        while (this._tokens.expect(TokenType.LPAREN)) {\n            const args = this._parseArguments();\n            this._tokens.expect(TokenType.RPAREN);\n            value = new FunctionCall(value, args);\n        }\n        return value;\n    }\n\n    // value => number | string | rangeReference | reference | parenthesized\n    _parseValue() {\n        const number = this._tokens.expect(TokenType.NUMBER)\n        if (number !== null)\n            return this._parseNumber(number);\n\n        const string = this._tokens.expect(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n        const reference = this._tokens.expect(TokenType.REFERENCE);\n        if (reference != null && this._tokens.expect(TokenType.COLON))\n            return this._finishRangeReference(reference);\n        else if (reference != null)\n            return this._parseCellReference(reference);\n\n        const identifier = this._tokens.expect(TokenType.IDENTIFIER);\n        if (identifier !== null)\n            return new Reference(identifier.value);\n\n        if (this._tokens.expect(TokenType.LPAREN))\n            return this._finishParenthesized();\n\n        throw new ParsingError(`Unexpected ${this._tokens.peek().type}, expected an expression or value`)\n    }\n\n    // parenthesized => '(' expression ')'\n    _finishParenthesized() {\n        const contents = this._parseExpression();\n        this._tokens.require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseNumber(number) {\n        return new Value(parseFloat(number.value));\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // rangeReference => IDENTIFIER ':' IDENTIFIER\n    _finishRangeReference(fromReference) {\n        const toReference = this._tokens.require(TokenType.REFERENCE);\n        const from = new CellReference(fromReference.value);\n        const to = new CellReference(toReference.value);\n        return new Range(from, to);\n    }\n\n    _parseCellReference(reference) {\n        // TODO: make nicer, maybe drop helper functions altogether.\n        const parsedPos = Helpers.parsePosition(reference.value);\n        const position = Helpers.makePosition(parsedPos.col, parsedPos.row);\n        return new CellReference(position);\n    }\n\n    // arguments => (expression (',' expression)*)?\n    _parseArguments() {\n        const args = [];\n        while (this._tokens.peek().type !== TokenType.RPAREN) {\n            if (args.length != 0)\n                this._tokens.require(TokenType.COMMA);\n            args.push(this._parseExpression());\n        }\n        return args;\n    }\n\n    _getCellReferences(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case CellReference:\n                return [expression.position];\n            case Reference:\n                return [];\n            case UnaryOp:\n                return this._getCellReferences(expression.value);\n            case BinaryOp:\n                return [...this._getCellReferences(expression.left), ...this._getCellReferences(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._getCellReferences(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from.position, expression.to.position)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new ParsingError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp, CellReference } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nexport default class Evaluator {\n    constructor() {\n        this.visitedCellStack = [];\n    }\n\n    evaluateCellAt(position, cell, environment) {\n        if (this.visitedCellStack.includes(position))\n            throw new RuntimeError(`Circular reference detected (${this.visitedCellStack.join(' -> ')} -> ${position})`);\n\n        this.visitedCellStack.push(position);\n        const result = this._evaluateCell(cell, environment);\n        this.visitedCellStack.pop();\n        return result;\n    }\n\n    evaluateQuery(cell, environment) {\n        return this._evaluateCell(cell, environment);\n    }\n\n    _evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case CellReference:\n                return this._evaluateCellReference(cell.position, environment);\n            case Reference:\n                return this._evaluateReference(cell.name, environment);\n            case UnaryOp:\n                return this._evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(cell.functionValue, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    _evaluateCellReference(position, environment) {\n        try {\n            return environment.getValue(position);\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\n            else throw e;\n        }\n    }\n\n    _evaluateReference(identifier, environment) {\n        try {\n            return environment.getGlobal(identifier);\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced value: ${identifier}`);\n            else throw e;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionValue, args, environment) {\n        const func = this._evaluateCell(functionValue, environment);\n        if (typeof func !== 'function')\n            throw new RuntimeError(`'${functionValue}' is called like a function, but is not a function.`);\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        try {\n            return func(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionValue}: ${ex}`);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from.position, to.position)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateCellReference(pos, environment));\n    }\n}","export default class ReferencesMap {\n    constructor() {\n        this._referencesFrom = {};\n        this._referencesTo = {};\n    }\n\n    getReferencesFrom(position) { return this._referencesFrom[position]; }\n    getReferencesTo(position) { return this._referencesTo[position]; }\n\n    addReference(positionFrom, referenceTo) {\n        if (!this._referencesFrom[positionFrom])\n            this._referencesFrom[positionFrom] = [];\n        this._referencesFrom[positionFrom].push(referenceTo);\n\n        if (!this._referencesTo[referenceTo])\n            this._referencesTo[referenceTo] = [];\n        this._referencesTo[referenceTo].push(positionFrom);\n    }\n\n    removeReferencesFrom(position) {\n        const targetNodes = this._referencesFrom[position];\n        for (let target of targetNodes) {\n            const valueIndex = this._referencesTo[target].indexOf(position);\n            if (valueIndex > -1) this._referencesTo[target].splice(valueIndex, 1);\n        }\n        delete this._referencesFrom[position];\n    }\n\n    getAffectedCells(position) {\n        // TODO: maybe optimize using stack and for loop\n        const referencesTo = this.getReferencesTo(position);\n        if (!referencesTo) return [];\n\n        const recursiveReferences = referencesTo.flatMap(this.getAffectedCells.bind(this));\n        return [...referencesTo, ...recursiveReferences];\n    }\n}","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells = {}, globals = {}, cellsChangedListener = (() => { })) {\n        this.cells = cells;\n        this.globals = globals;\n        this.cellsChangedListener = cellsChangedListener;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = {}; // position => expression tree\n        this._valuesCache = {}; // position => value;\n        this._referencesMap = new ReferencesMap();\n    }\n\n    getText(position) {\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells[position] = value;\n\n        const affectedCells = [position, ...this._referencesMap.getAffectedCells(position)];\n        for (let pos of affectedCells)\n            delete this._valuesCache[pos];\n\n        delete this._expressionsCache[position];\n        if (this._referencesMap.getReferencesFrom(position))\n            this._referencesMap.removeReferencesFrom(position);\n\n        this.cellsChangedListener(affectedCells);\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.hasOwnProperty(position))\n            return this._expressionsCache[position];\n\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\n        const { parsed, references } = this._parser.parse(text);\n        this._expressionsCache[position] = parsed;\n\n        for (let reference of references)\n            this._referencesMap.addReference(position, reference);\n\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.hasOwnProperty(position))\n            return this._valuesCache[position];\n\n        const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._valuesCache[position] = result;\n        return result;\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getGlobal(name) {\n        if (this.globals[name] === undefined)\n            throw new RuntimeError(`Unknown global value: ${name}`);\n        return this.globals[name];\n    }\n};","export const builtinValues = {\n    SUM: (...args) => {\n        let sum = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number')\n                sum += arg;\n            else if (!(arg === null || arg === undefined))\n                throw new Error(`${typeof (arg)} is not a valid argument to SUM(). Expected number, number[], null or undefined.`);\n        }\n        return sum;\n    },\n\n    AVERAGE: (...args) => {\n        let sum = 0;\n        let count = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number') {\n                sum += arg;\n                count++;\n            } else if (!(arg === null || arg === undefined)) {\n                throw new Error(`${typeof (arg)} is not a valid argument to AVERAGE().`);\n            }\n        }\n        return sum / count;\n    },\n};","import { Environment } from './environment';\nimport { builtinValues } from './builtinValues';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\nexport { builtinValues };\n\nexport class Spreadsheet {\n    constructor(cells = {}, globals = builtinValues, cellsChangedListener) {\n        this.cells = cells;\n        this._environment = new Environment(this.cells, globals, cellsChangedListener);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["Helpers.parsePosition","Helpers.makePosition","Helpers.positionsInRange"],"mappings":"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"}