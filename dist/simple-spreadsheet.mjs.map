{"version":3,"file":"simple-spreadsheet.mjs","sources":["../src/errors.js","../src/tokenizer.js","../src/expressions.js","../src/helpers.js","../src/parser.js","../src/evaluator.js","../src/environment.js","../src/functions.js","../src/spreadsheet.js"],"sourcesContent":["export class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n","import { ParsingError } from './errors';\n\nexport const TokenType = Object.freeze({\n    EOF: 'EOF',\n    WHITESPACE: 'WHITESPACE',\n    PLUS: 'PLUS',\n    MINUS: 'MINUS',\n    STAR: 'STAR',\n    SLASH: 'SLASH',\n    LPAREN: 'LPAREN',\n    RPAREN: 'RPAREN',\n    COLON: 'COLON',\n    EQUALS: 'EQUALS',\n    COMMA: 'COMMA',\n    NUMBER: 'NUMBER',\n    STRING: 'STRING',\n    IDENTIFIER: 'IDENTIFIER',\n});\n\nexport class Tokenizer {\n    constructor() {\n        this.rules = {\n            // NUMBER and IDENTIFIER are used the most so keep them at the top\n            '\\\\d+(?:\\\\.\\\\d+)?': TokenType.NUMBER,\n            '[a-zA-Z]\\\\w+': TokenType.IDENTIFIER,\n            '\\\\s+': TokenType.WHITESPACE,\n            '\\\\+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '\\\\*': TokenType.STAR,\n            '\\\\/': TokenType.SLASH,\n            '\\\\(': TokenType.LPAREN,\n            '\\\\)': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n            '\\\\\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\\\\\"': TokenType.STRING,\n            '$': TokenType.EOF,\n        };\n    }\n\n    begin(str) {\n        this.remaining = str;\n        return this;\n    }\n\n    next() {\n        const next = this.peek();\n        this.remaining = this.remaining.slice(next.value.length);\n        return next;\n    }\n\n    peek() {\n        for (let rule in this.rules) {\n            const match = this.remaining.match(new RegExp('^' + rule));\n            if (match !== null) {\n                return { type: this.rules[rule], value: match[0] };\n            }\n        }\n        throw new ParsingError(`Unknown token '${this.remaining}'`);\n    }\n\n    rest() {\n        const rest = this.remaining;\n        this.remaining = \"\";\n        return rest;\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `Reference(${this.col}${this.row})`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `BinaryOp(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `UnaryOp(${this.op} ${this.value})`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `FunctionCall(${this.functionName}, ${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `Range(${this.from}, ${this.to})`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parseRange(range) {\n    const [from, to] = range.split(':');\n    return { from: parsePosition(from), to: parsePosition(to) };\n}\n\nexport function makeRange(from, to) {\n    return `${from}:${to}`;\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts === null ? null :\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this.tokens = tokenizer;\n    }\n\n    parse(text) {\n        if (text === null || text === undefined || text.constructor !== String)\n            return new Value(text); // if there is nothing to parse, return the value.\n\n        this.tokens.begin(text);\n        const result = this.parseCell();\n        return result;\n    }\n\n    // Cell => '=' Expression | SimpleValue\n    parseCell() {\n        if (this.tokens.remaining.startsWith('=')) {\n            this._expectAny(TokenType.EQUALS);\n            const result = this.parseExpression();\n            this._require(TokenType.EOF);\n            return result;\n        } else {\n            return this.parseSimpleValue();\n        }\n    }\n\n    // SimpleValue => number | text\n    parseSimpleValue() {\n        const value = this.tokens.rest();\n        if (value.match(/^[+-]?\\d+(?:\\.\\d+)?$/)) return new Value(parseFloat(value));\n        else return new Value(value);\n    }\n\n    // Expression => Term\n    parseExpression() {\n        return this.parseTerm();\n    }\n\n    // Term => Factor ([+-] Factor)*\n    parseTerm() {\n        let left = this.parseFactor();\n        let operation;\n        while ((operation = this._expectAny(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseFactor());\n        }\n        return left;\n    }\n\n    // Factor => Unary ([*/] Unary)*\n    parseFactor() {\n        let left = this.parseUnary();\n        let operation;\n        while ((operation = this._expectAny(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this.parseUnary());\n        }\n        return left;\n    }\n\n    // Unary => [+-] Unary | Value\n    parseUnary() {\n        let operation = this._expectAny(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this.parseUnary())\n            : this.parseValue();\n    }\n\n    // Value => Parenthesized | number | string | RangeReference | FunctionCall | Reference\n    parseValue() {\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseParenthesized();\n\n        const number = this._expectAny(TokenType.NUMBER)\n        if (number !== null)\n            return this._parseNumber(number);\n\n        const string = this._expectAny(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._require(TokenType.IDENTIFIER);\n\n        if (identifier !== null && this._expectAny(TokenType.COLON))\n            return this._parseRangeReference(identifier);\n\n        if (this._expectAny(TokenType.LPAREN))\n            return this._parseFunctionCall(identifier);\n\n        return this._parseReference(identifier.value);\n    }\n\n    // Parenthesized => ( Expression )\n    _parseParenthesized() {\n        // ( is already parsed by parseValue\n        const contents = this.parseExpression();\n        this._require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseNumber(number) {\n        return new Value(parseFloat(number.value));\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1');\n        return new Value(escapedString);\n    }\n\n    // RangeReference => identifier ':' identifier\n    _parseRangeReference(identifier) {\n        // start identifier and : are already parsed\n        const endIdentifier = this._require(TokenType.IDENTIFIER);\n        const from = this._parseReference(identifier.value);\n        const to = this._parseReference(endIdentifier.value);\n        return new Range(from, to);\n    }\n\n    // FunctionCall => identifier ( '(' Arguments ')' )*\n    _parseFunctionCall(identifier) {\n        // function name identifier is already parsed\n        let value = identifier.value;\n        do {\n            const args = this.parseArguments();\n            value = new FunctionCall(value, args);\n        } while (this._expectAny(TokenType.LPAREN))\n        return value;\n    }\n\n    // Reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // Arguments => (Expression (',' Expression)*)?\n    parseArguments() {\n        const args = [];\n        while (!this._expectAny(TokenType.RPAREN)) {\n            if (args.length != 0)\n                this._require(TokenType.COMMA);\n            args.push(this.parseExpression());\n        }\n        return args;\n    }\n\n    _expectAny(...types) {\n        const current = this._next();\n        if (types.includes(current.type)) {\n            this.tokens.next();\n            return current;\n        } else {\n            return null;\n        }\n    }\n\n    _require(type) {\n        const next = this._expectAny(type);\n        if (next === null)\n            throw new ParsingError(`Expected ${type}, got ${this.tokens.peek().type} instead`);\n        else\n            return next;\n    }\n\n    _next() {\n        let current = this.tokens.peek();\n        while (current.type === TokenType.WHITESPACE) {\n            this.tokens.next();\n            current = this.tokens.peek();\n        }\n        return current;\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError } from './errors';\nimport * as Helpers from './helpers';\n\nexport default class Evaluator {\n    constructor() {\n        this._currentCellStack = [];\n        this._currentCell = () => this._currentCellStack[this._currentCellStack.length - 1];\n    }\n\n    evaluateCellAt(position, cell, environment) {\n        // TODO: here we could check for cycles in cell references\n        // if the stack already contains the position.\n        this._currentCellStack.push({ position, references: new Set() });\n        const result = this._evaluateCell(cell, environment);\n        return { result, references: this._currentCellStack.pop().references };\n    }\n\n    evaluateQuery(cell, environment) {\n        return this._evaluateCell(cell, environment);\n    }\n\n    _evaluateCell(cell, environment) {\n        switch (cell.constructor) {\n            case Value:\n                return cell.value;\n            case Reference:\n                return this._evaluateReference(Helpers.makePosition(cell.col, cell.row), environment);\n            case UnaryOp:\n                return this._evaluateUnary(cell.op, cell.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(cell.left, cell.op, cell.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(cell.functionName, cell.args, environment);\n            case Range:\n                throw new RuntimeError(`Range references are allowed only as arguments of functions`);\n            default:\n                throw new RuntimeError(`Unknown expression type: ${typeof cell}`);\n        }\n    }\n\n    _evaluateReference(position, environment) {\n        try {\n            const value = environment.getValue(position);\n            const currentCell = this._currentCellStack[this._currentCellStack.length - 1];\n            if (currentCell)\n                currentCell.references.add(position);\n            return value;\n        } catch (e) {\n            if (e instanceof ParsingError)\n                throw new RuntimeError(`Error in referenced cell: ${position}`);\n            else throw e;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new RuntimeError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new RuntimeError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionName, args, environment) {\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        const func = environment.getFunction(functionName);\n        try {\n            return func(...argumentValues);\n        } catch (ex) {\n            throw new RuntimeError(`Error in function ${functionName}: ${ex}`);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        const cells = Helpers.positionsInRange(from, to)\n            .map(pos => new Reference(pos.col, pos.row));\n        return cells.map(cell => this._evaluateCell(cell, environment));\n    }\n}\n","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { RuntimeError } from './errors';\n\nexport class Environment {\n    constructor(cells = {}, builtinFunctions = {}) {\n        this.cells = cells;\n        this.functions = builtinFunctions;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n        this._expressionsCache = {}; // position => expression tree\n        this._valuesCache = {}; // position => value;\n        this._referencesTo = {}; // position => [referenced by]\n    }\n\n    getText(position) {\n        return this.cells.hasOwnProperty(position) ? this.cells[position].toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells[position] = value;\n        delete this._expressionsCache[position];\n        this._resetReferences(position);\n    }\n\n    _resetReferences(position) {\n        delete this._valuesCache[position];\n        const references = this._referencesTo[position];\n        if (references) {\n            for (let reference of references) {\n                this._resetReferences(reference);\n            };\n        }\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.hasOwnProperty(position))\n            return this._expressionsCache[position];\n        const text = this.cells.hasOwnProperty(position) ? this.cells[position] : null;\n        const parsed = this._parser.parse(text);\n        this._expressionsCache[position] = parsed;\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.hasOwnProperty(position))\n            return this._valuesCache[position];\n        const { result, references } = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._addReferences(references, position);\n        this._valuesCache[position] = result;\n        return result;\n    }\n\n    _addReferences(references, position) {\n        // TODO: check for circular references, probably somewhere here?\n        // Maybe on evaluation we can just track already visited cells,\n        // because else detecting cycles in a DAG can be O(E) when there is NO cycle.\n\n        references.forEach(reference => {\n            if (!this._referencesTo[reference])\n                this._referencesTo[reference] = [];\n            this._referencesTo[reference].push(position);\n        });\n    }\n\n    evaluateQuery(expression) {\n        const parsed = this._parser.parse(expression);\n        const evaluated = this._evaluator.evaluateQuery(parsed, this);\n        return evaluated;\n    }\n\n    getFunction(name) {\n        if (this.functions[name] === undefined)\n            throw new RuntimeError(`Unknown function: ${name} is not a function`);\n        return this.functions[name];\n    }\n};","export const builtinFunctions = {\n    SUM: (...args) => {\n        let sum = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number')\n                sum += arg;\n            else if (!(arg === null || arg === undefined))\n                throw new Error(`${typeof (arg)} is not a valid argument to SUM(). Expected number, number[], null or undefined.`);\n        }\n        return sum;\n    },\n\n    AVERAGE: (...args) => {\n        let sum = 0;\n        let count = 0;\n        for (let arg of args.flat()) {\n            if (typeof (arg) === 'number') {\n                sum += arg;\n                count++;\n            } else if (!(arg === null || arg === undefined)) {\n                throw new Error(`${typeof (arg)} is not a valid argument to AVERAGE().`);\n            }\n        }\n        return sum / count;\n    },\n};","import { Environment } from './environment';\nimport { builtinFunctions } from './functions';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport { SpreadsheetError, RuntimeError, ParsingError } from './errors';\nexport { builtinFunctions };\n\nexport class Spreadsheet {\n    constructor(cells = {}, functions = builtinFunctions) {\n        this.cells = cells;\n        this._environment = new Environment(this.cells, functions);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["Helpers.parsePosition","Helpers.makePosition","Helpers.positionsInRange"],"mappings":"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"}