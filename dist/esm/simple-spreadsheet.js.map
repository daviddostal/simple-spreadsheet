{"version":3,"file":"simple-spreadsheet.js","sources":["../../src/spreadsheet/errors.js","../../src/spreadsheet/tokenStream.js","../../src/spreadsheet/tokenizer.js","../../src/spreadsheet/expressions.js","../../src/spreadsheet/helpers.js","../../src/spreadsheet/parser.js","../../src/spreadsheet/evaluator.js","../../src/spreadsheet/referencesMap.js","../../src/spreadsheet/environment.js","../../src/spreadsheet/spreadsheet.js"],"sourcesContent":["export class NotImplementedError extends Error {\n    constructor(message) { super(message); }\n    toString() { return `Not implemented: ${this.message}` }\n}\n\nexport class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n\nexport class ReferencedCellError extends RuntimeError {\n    constructor(cell) {\n        super(`Error in referenced cell: ${cell}`);\n        this.cell = cell;\n    }\n}\n\nexport class CircularReferenceError extends RuntimeError {\n    constructor(cells) {\n        super(`Circular reference detected: ${cells.join(' -> ')}`);\n        this.cells = cells;\n    }\n}\n\nexport class FunctionEvaluationError extends RuntimeError {\n    constructor(functionName, error) {\n        super(`Error in function ${functionName}: ${error}`)\n        this.functionName = functionName;\n        this.error = error;\n    }\n}\n\nexport class RangeReferenceNotAllowedError extends RuntimeError {\n    constructor() { super(`Range references are allowed only as references to functions`); }\n}\n\nexport class UnknownFunctionError extends RuntimeError {\n    constructor(functionName) {\n        super(`Unknown function: ${functionName}`);\n        this.functionName = functionName;\n    }\n}","import { ParsingError } from \"./errors\";\n\nexport default class TokenStream {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._currentPos = 0;\n    }\n\n    peek() {\n        return this._tokens[this._currentPos] || null;\n    }\n\n    expect(...types) {\n        const token = this.peek();\n        if (token !== null && types.includes(token.type)) {\n            this._currentPos++;\n            return token;\n        }\n        return null;\n    }\n\n    require(...types) {\n        const token = this.expect(...types);\n        if (token === null)\n            throw new ParsingError(`Unexpected ${this.peek().type.description}, expected ${types.map(sym => sym.description).join(' or ')}`);\n        return token;\n    }\n}","import { ParsingError } from './errors';\nimport TokenStream from './tokenStream';\n\nexport const TokenType = Object.freeze({\n    // Note: strings must be unique, because they are used for comparison\n    EOF: Symbol('end of formula'),\n    WHITESPACE: Symbol('whitespace'),\n    PLUS: Symbol('+'),\n    MINUS: Symbol('-'),\n    STAR: Symbol('*'),\n    SLASH: Symbol('/'),\n    LPAREN: Symbol('opening parenthesis'),\n    RPAREN: Symbol('closing parenthesis'),\n    COLON: Symbol(':'),\n    EQUALS: Symbol('='),\n    COMMA: Symbol('comma'),\n    NUMBER: Symbol('number'),\n    STRING: Symbol('string'),\n    IDENTIFIER: Symbol('identifier'),\n});\n\nexport class Tokenizer {\n    constructor() {\n        this._rules = [\n            // NUMBER and IDENTIFIER are used the most so keep them at the top (for performance reasons - it makes a difference, I measured it)\n            // Patterns usually start with ^ so they match the start of the remaining\n            // string, not anywhere in the middle.\n            { pattern: /^\\d+(?:\\.\\d+)?/, type: TokenType.NUMBER },\n            { pattern: /^[a-zA-Z]\\w+/, type: TokenType.IDENTIFIER },\n            { pattern: /^\"(?:[^\"\\\\]|\\\\.)*\"/, type: TokenType.STRING },\n            { pattern: /^$/, type: TokenType.EOF },\n        ];\n\n        this._operators = {\n            ' ': TokenType.WHITESPACE,\n            '\\t': TokenType.WHITESPACE,\n            '\\r': TokenType.WHITESPACE,\n            '\\n': TokenType.WHITESPACE,\n            '+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '*': TokenType.STAR,\n            '/': TokenType.SLASH,\n            '(': TokenType.LPAREN,\n            ')': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n        }\n    }\n\n    tokenize(text) {\n        const tokens = [];\n        let remaining = text;\n        while (remaining.length > 0) {\n            const token = this._nextToken(remaining);\n            tokens.push(token);\n            remaining = remaining.slice(token.value.length);\n        }\n        tokens.push({ type: TokenType.EOF, value: '' });\n        return new TokenStream(tokens.filter(token => token.type !== TokenType.WHITESPACE));\n    }\n\n    _nextToken(text) {\n        const firstChar = text[0];\n        const operator = this._operators[firstChar];\n        if (operator !== undefined) return { type: operator, value: firstChar };\n\n        for (let rule of this._rules) {\n            const match = text.match(rule.pattern);\n            if (match !== null)\n                return { type: rule.type, value: match[0] };\n        }\n        throw new ParsingError(`Unknown token at '${text}'`);\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    // TODO: Maybe refactor to only hold single property?\n    // Normalize position?\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `${this.col}${this.row}`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `${this.op}${this.value}`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `${this.functionName}(${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `${this.from}:${this.to}`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    // TODO: Use flatMap?\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts &&\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError, NotImplementedError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this._tokenizer = tokenizer;\n        this._tokens = null;\n    }\n\n    // cell => empty | '=' expression EOF | number | string\n    parse(text) {\n        const needsParsing = text !== null && text !== undefined && text.constructor === String;\n        if (!needsParsing)\n            return { parsed: new Value(text), references: [] };\n\n        const isFormula = text[0] === '='; // TODO: add test with and without whitespace\n        if (isFormula) {\n            this._tokens = this._tokenizer.tokenize(text);\n            this._tokens.require(TokenType.EQUALS);\n            const parsed = this._parseExpression();\n            this._tokens.require(TokenType.EOF);\n            const references = this._referencesIn(parsed);\n            return { parsed, references };\n        }\n\n        // number\n        if (text.match(/^[+-]?\\d+(?:\\.\\d+)?$/))\n            return { parsed: new Value(parseFloat(text)), references: [] };\n\n        // string\n        return { parsed: new Value(text), references: [] };\n    }\n\n    // expression => term\n    _parseExpression() {\n        return this._parseTerm();\n    }\n\n    // term => factor (('+'|'-') factor)*\n    _parseTerm() {\n        let left = this._parseFactor();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseFactor());\n        }\n        return left;\n    }\n\n    // factor => unary (('*'|'/') unary)*\n    _parseFactor() {\n        let left = this._parseRange();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseRange());\n        }\n        return left;\n    }\n\n    // range => unary (':' unary)*\n    _parseRange() {\n        // TODO: Make ranges first-class\n        return this._parseUnary();\n    }\n\n    // unary => ('+'|'-') unary | call\n    _parseUnary() {\n        const operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this._parseUnary())\n            : this._parseValue();\n    }\n\n    // value => number | string | rangeReference | reference | parenthesized | functionCall\n    _parseValue() {\n        if (this._tokens.expect(TokenType.LPAREN))\n            return this._finishParenthesized();\n\n        const number = this._tokens.expect(TokenType.NUMBER)\n        if (number !== null)\n            return new Value(parseFloat(number.value));\n\n        const string = this._tokens.expect(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._tokens.expect(TokenType.IDENTIFIER);\n        if (identifier !== null) {\n            if (this._tokens.expect(TokenType.COLON))\n                return this._finishRangeReference(identifier);\n\n            if (this._tokens.expect(TokenType.LPAREN))\n                return this._finishFunctionCall(identifier);\n\n            return this._parseReference(identifier.value);\n        }\n        throw new ParsingError(`Unexpected ${this._tokens.peek().type.description}, expected an expression or value`)\n    }\n\n    // parenthesized => '(' expression ')'\n    _finishParenthesized() {\n        const contents = this._parseExpression();\n        this._tokens.require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1'); // TODO: check escaped characters are escapable\n        return new Value(escapedString);\n    }\n\n    // rangeReference => IDENTIFIER ':' IDENTIFIER\n    _finishRangeReference(start) {\n        // start identifier and : are already parsed\n        const end = this._tokens.require(TokenType.IDENTIFIER);\n        const from = this._parseReference(start.value);\n        const to = this._parseReference(end.value);\n        return new Range(from, to);\n    }\n\n    // functionCall => IDENTIFIER ('(' arguments ')')*\n    _finishFunctionCall(identifier) {\n        // TODO: Test or remove nested function calls such as FOO()()\n        // Or check for function return types at runtime?\n\n        const args = this._parseArguments();\n        this._tokens.expect(TokenType.RPAREN);\n        return new FunctionCall(identifier.value, args);\n    }\n\n    // reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // arguments => (expression (',' expression)*)?\n    _parseArguments() {\n        const args = [];\n        while (this._tokens.peek().type !== TokenType.RPAREN) {\n            if (args.length != 0)\n                this._tokens.require(TokenType.COMMA);\n            args.push(this._parseExpression());\n        }\n        return args;\n    }\n\n    _referencesIn(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case Reference:\n                return [Helpers.makePosition(expression.col, expression.row)];\n            case UnaryOp:\n                return this._referencesIn(expression.value);\n            case BinaryOp:\n                return [...this._referencesIn(expression.left), ...this._referencesIn(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._referencesIn(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from, expression.to)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new NotImplementedError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError, CircularReferenceError, ReferencedCellError, NotImplementedError, RangeReferenceNotAllowedError, FunctionEvaluationError } from './errors';\nimport * as Helpers from './helpers';\n\nclass CircularRefInternal extends Error {\n    constructor(position, circlePositions) { super(); this.position = position; this.circlePositions = circlePositions; }\n}\n\nexport default class Evaluator {\n    constructor() {\n        this.visitedCellStack = [];\n    }\n\n    evaluateCellAt(position, expression, environment) {\n        if (this.visitedCellStack.includes(position))\n            throw new CircularRefInternal(position, [...this.visitedCellStack, position]);\n\n        this.visitedCellStack.push(position);\n        try {\n            const result = this._evaluateCell(expression, environment);\n            this.visitedCellStack.pop();\n            return result;\n        } catch (ex) {\n            this.visitedCellStack.pop()\n            // Normal errors propagate as usual, but CircularRefInternal is used\n            // only to propagate the exception to the originating cell internally\n            // (so it doesn't get reported just as an error in a referenced cell).\n            // Once the CircularRefInternal reaches back to the originating cell,\n            // we turn it into a normal CircularReferenceError.\n            if (ex instanceof CircularRefInternal && ex.position === position) {\n                throw new CircularReferenceError(ex.circlePositions);\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    evaluateQuery(expression, environment) {\n        return this._evaluateCell(expression, environment);\n    }\n\n    _evaluateCell(expression, environment) {\n        switch (expression.constructor) {\n            case Value:\n                return expression.value;\n            case Reference:\n                return this._evaluateReference(Helpers.makePosition(expression.col, expression.row), environment);\n            case UnaryOp:\n                return this._evaluateUnary(expression.op, expression.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(expression.left, expression.op, expression.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(expression.functionName, expression.args, environment);\n            case Range:\n                throw new RangeReferenceNotAllowedError();\n            default:\n                throw new NotImplementedError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n\n    _evaluateReference(position, environment) {\n        try {\n            return environment.getValue(position);\n        } catch (ex) {\n            if (ex instanceof ParsingError || ex instanceof RuntimeError)\n                throw new ReferencedCellError(position);\n            else throw ex;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new NotImplementedError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new NotImplementedError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionName, args, environment) {\n        let func = environment.getFunction(functionName);\n        func = func instanceof Function ? { isMacro: false, function: func } : func;\n        return (func.isMacro === true) ?\n            this._evaluateMacro(functionName, func, args, environment) :\n            this._evaluateSpreadsheetFunction(functionName, func, args, environment);\n    }\n\n    _evaluateSpreadsheetFunction(functionName, func, args, environment) {\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        try {\n            return func.function(...argumentValues);\n        } catch (ex) {\n            throw new FunctionEvaluationError(functionName, ex);\n        }\n    }\n\n    _evaluateMacro(macroName, macro, args, environment) {\n        const argsLazyValues = args.map(arg => () => this._evaluateExpression(arg, environment));\n        try {\n            return macro.function(...argsLazyValues);\n        } catch (ex) {\n            throw new FunctionEvaluationError(macroName, ex);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from, to)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateReference(pos, environment));\n    }\n}\n","export default class ReferencesMap {\n    constructor() {\n        this._referencesFrom = new Map(); // { position => Set(referencesFrom) }\n        this._referencesTo = new Map(); // { position => Set(referencedBy) }\n    }\n\n    addReferences(positionFrom, referencesTo) {\n        if (!this._referencesFrom.has(positionFrom))\n            this._referencesFrom.set(positionFrom, new Set(referencesTo));\n\n        for (let referenceTo of referencesTo) {\n            this._referencesFrom.get(positionFrom).add(referenceTo);\n\n            if (!this._referencesTo.has(referenceTo))\n                this._referencesTo.set(referenceTo, new Set());\n            this._referencesTo.get(referenceTo).add(positionFrom);\n        }\n    }\n\n    removeReferencesFrom(position) {\n        // TODO: test this code works properly\n        const targetNodes = this._referencesFrom.get(position);\n        if (targetNodes) {\n            for (let target of targetNodes)\n                this._referencesTo.get(target).delete(position);\n            this._referencesFrom.delete(position);\n        }\n    }\n\n    cellsDependingOn(position) {\n        const visited = new Set();\n        const toVisitStack = [position];\n        while (toVisitStack.length > 0) {\n            const current = toVisitStack.pop();\n            visited.add(current);\n            const neighbors = this._referencesTo.has(current) ?\n                [...this._referencesTo.get(current)].filter(n => !visited.has(n)) : [];\n            const newNeighbors = neighbors.filter(n => !visited.has(n));\n            toVisitStack.push(...newNeighbors);\n        }\n        return visited;\n    }\n}\n","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { UnknownFunctionError, RuntimeError, ParsingError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells, functions, cellsChangedListener) {\n        this.cells = cells; // { position => formula text }\n        this.functions = functions; // { name => function or macro }\n        this.onCellsChanged = cellsChangedListener;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = new Map(); // { position => expression tree (AST) }\n        this._valuesCache = new Map(); // { position => value; }\n        this._errorsCache = new Map(); // { position => error; }\n        this._referencesMap = new ReferencesMap(); // tracks references between cells\n    }\n\n    getText(position) {\n        return this.cells.has(position) ? this.cells.get(position).toString() : \"\";\n    }\n\n    setText(position, text) {\n        this.cells.set(position, text);\n\n        // affectedCells also contains `position`\n        const affectedCells = this._referencesMap.cellsDependingOn(position);\n        for (let pos of affectedCells) {\n            this._valuesCache.delete(pos);\n            this._errorsCache.delete(pos);\n        }\n\n        this._expressionsCache.delete(position);\n        this._referencesMap.removeReferencesFrom(position);\n\n        this.onCellsChanged([...affectedCells]); // TODO: should this remain a Set?\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.has(position))\n            return this._expressionsCache.get(position);\n\n        if (this._errorsCache.has(position))\n            throw this._errorsCache.get(position);\n\n        const text = this.cells.has(position) ? this.cells.get(position) : null;\n        try {\n            const { parsed, references } = this._parser.parse(text);\n            this._expressionsCache.set(position, parsed);\n            this._referencesMap.addReferences(position, references);\n            return parsed;\n        } catch (ex) {\n            if (ex instanceof ParsingError)\n                this._errorsCache.set(position, ex);\n            throw ex;\n        }\n    }\n\n    getValue(position) {\n        if (this._valuesCache.has(position))\n            return this._valuesCache.get(position);\n\n        if (this._errorsCache.has(position))\n            throw this._errorsCache.get(position);\n\n        try {\n            const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n            this._valuesCache.set(position, result);\n            return result;\n        } catch (ex) {\n            if (ex instanceof RuntimeError)\n                this._errorsCache.set(position, ex);\n            throw ex;\n        }\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getFunction(name) {\n        if (!this.functions.has(name))\n            throw new UnknownFunctionError(name);\n        return this.functions.get(name);\n    }\n}","import { Environment } from './environment';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport * from './errors';\n\nexport class Spreadsheet {\n    constructor(cells = new Map(), functions = new Map(), onCellsChanged = (() => { })) {\n        this.cells = cells instanceof Map ? cells : new Map(Object.entries(cells));\n        this.functions = functions instanceof Map ? functions : new Map(Object.entries(functions));\n        this._environment = new Environment(this.cells, this.functions, onCellsChanged);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["Helpers.parsePosition","Helpers.makePosition","Helpers.positionsInRange"],"mappings":"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"}