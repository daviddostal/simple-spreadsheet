{"version":3,"file":"simple-spreadsheet.min.js","sources":["../../src/spreadsheet/errors.js","../../src/spreadsheet/tokenStream.js","../../src/spreadsheet/tokenizer.js","../../src/spreadsheet/expressions.js","../../src/spreadsheet/helpers.js","../../src/spreadsheet/parser.js","../../src/spreadsheet/evaluator.js","../../src/spreadsheet/referencesMap.js","../../src/spreadsheet/environment.js","../../src/spreadsheet/spreadsheet.js"],"sourcesContent":["export class NotImplementedError extends Error {\n    constructor(message) { super(message); }\n    toString() { return `Not implemented: ${this.message}` }\n}\n\nexport class SpreadsheetError extends Error { }\n\nexport class ParsingError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Syntax error: ${this.message}`; }\n}\n\nexport class RuntimeError extends SpreadsheetError {\n    constructor(message) { super(message); }\n    toString() { return `Evaluation error: ${this.message}`; }\n}\n\nexport class ReferencedCellError extends RuntimeError {\n    constructor(cell) {\n        super(`Error in referenced cell: ${cell}`);\n        this.cell = cell;\n    }\n}\n\nexport class CircularReferenceError extends RuntimeError {\n    constructor(cells) {\n        super(`Circular reference detected: ${cells.join(' -> ')}`);\n        this.cells = cells;\n    }\n}\n\nexport class FunctionEvaluationError extends RuntimeError {\n    constructor(functionName, error) {\n        super(`Error in function ${functionName}: ${error}`)\n        this.functionName = functionName;\n        this.error = error;\n    }\n}\n\nexport class RangeReferenceNotAllowedError extends RuntimeError {\n    constructor() { super(`Range references are allowed only as references to functions`); }\n}\n\nexport class UnknownFunctionError extends RuntimeError {\n    constructor(functionName) {\n        super(`Unknown function: ${functionName}`);\n        this.functionName = functionName;\n    }\n}","import { ParsingError } from \"./errors\";\n\nexport default class TokenStream {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._currentPos = 0;\n    }\n\n    peek() {\n        return this._tokens[this._currentPos] || null;\n    }\n\n    expect(...types) {\n        const token = this.peek();\n        if (token !== null && types.includes(token.type)) {\n            this._currentPos++;\n            return token;\n        }\n        return null;\n    }\n\n    require(...types) {\n        const token = this.expect(...types);\n        if (token === null)\n            throw new ParsingError(`Unexpected ${this.peek().type.description}, expected ${types.map(sym => sym.description).join(' or ')}`);\n        return token;\n    }\n}","import { ParsingError } from './errors';\nimport TokenStream from './tokenStream';\n\nexport const TokenType = Object.freeze({\n    // Note: strings must be unique, because they are used for comparison\n    EOF: Symbol('end of formula'),\n    WHITESPACE: Symbol('whitespace'),\n    PLUS: Symbol('+'),\n    MINUS: Symbol('-'),\n    STAR: Symbol('*'),\n    SLASH: Symbol('/'),\n    LPAREN: Symbol('opening parenthesis'),\n    RPAREN: Symbol('closing parenthesis'),\n    COLON: Symbol(':'),\n    EQUALS: Symbol('='),\n    COMMA: Symbol('comma'),\n    NUMBER: Symbol('number'),\n    STRING: Symbol('string'),\n    IDENTIFIER: Symbol('identifier'),\n});\n\nexport class Tokenizer {\n    constructor() {\n        this._rules = [\n            // NUMBER and IDENTIFIER are used the most so keep them at the top (for performance reasons - it makes a difference, I measured it)\n            // Patterns usually start with ^ so they match the start of the remaining\n            // string, not anywhere in the middle.\n            { pattern: /^\\d+(?:\\.\\d+)?/, type: TokenType.NUMBER },\n            { pattern: /^[a-zA-Z]\\w+/, type: TokenType.IDENTIFIER },\n            { pattern: /^\"(?:[^\"\\\\]|\\\\.)*\"/, type: TokenType.STRING },\n            { pattern: /^$/, type: TokenType.EOF },\n        ];\n\n        this._operators = {\n            ' ': TokenType.WHITESPACE,\n            '\\t': TokenType.WHITESPACE,\n            '\\r': TokenType.WHITESPACE,\n            '\\n': TokenType.WHITESPACE,\n            '+': TokenType.PLUS,\n            '-': TokenType.MINUS,\n            '*': TokenType.STAR,\n            '/': TokenType.SLASH,\n            '(': TokenType.LPAREN,\n            ')': TokenType.RPAREN,\n            '=': TokenType.EQUALS,\n            ':': TokenType.COLON,\n            ',': TokenType.COMMA,\n        }\n    }\n\n    tokenize(text) {\n        const tokens = [];\n        let remaining = text;\n        while (remaining.length > 0) {\n            const token = this._nextToken(remaining);\n            tokens.push(token);\n            remaining = remaining.slice(token.value.length);\n        }\n        tokens.push({ type: TokenType.EOF, value: '' });\n        return new TokenStream(tokens.filter(token => token.type !== TokenType.WHITESPACE));\n    }\n\n    _nextToken(text) {\n        const firstChar = text[0];\n        const operator = this._operators[firstChar];\n        if (operator !== undefined) return { type: operator, value: firstChar };\n\n        for (let rule of this._rules) {\n            const match = text.match(rule.pattern);\n            if (match !== null)\n                return { type: rule.type, value: match[0] };\n        }\n        throw new ParsingError(`Unknown token at '${text}'`);\n    }\n}\n","export class Expression { }\n\nexport class Value extends Expression {\n    constructor(value) { super(); this.value = value; }\n    toString() { return this.value.constructor === String ? `\"${this.value}\"` : `${this.value}`; }\n}\n\nexport class Reference extends Expression {\n    // TODO: Maybe refactor to only hold single property?\n    // Normalize position?\n    constructor(col, row) { super(); this.col = col; this.row = row; }\n    toString() { return `${this.col}${this.row}`; }\n}\n\nexport class BinaryOp extends Expression {\n    constructor(left, op, right) { super(); this.left = left; this.op = op; this.right = right; }\n    toString() { return `(${this.left} ${this.op} ${this.right})`; }\n}\n\nexport class UnaryOp extends Expression {\n    constructor(op, value) { super(); this.op = op; this.value = value; }\n    toString() { return `${this.op}${this.value}`; }\n}\n\nexport class FunctionCall extends Expression {\n    constructor(functionName, args) { super(); this.functionName = functionName; this.args = args; }\n    toString() { return `${this.functionName}(${this.args.join(', ')})`; }\n}\n\nexport class Range extends Expression {\n    constructor(from, to) { super(); this.from = from; this.to = to; }\n    toString() { return `${this.from}:${this.to}`; }\n}","export function positionsInRange(from, to) {\n    const positions = [];\n    // TODO: Use flatMap?\n    for (let col of _range(columnIndex(from.col), columnIndex(to.col)))\n        for (let row of _range(from.row, to.row))\n            positions.push({ col: columnLetter(col), row: row });\n    return positions;\n}\n\nfunction _range(from, to) {\n    return from <= to\n        ? Array.from({ length: to - from + 1 }, (_, i) => i + from)\n        : Array.from({ length: from - to + 1 }, (_, i) => from - i);\n}\n\nexport function parsePosition(position) {\n    const positionParts = position.match(/^([A-Za-z]+)(\\d+)$/);\n    return positionParts &&\n        { col: positionParts[1], row: parseInt(positionParts[2]) };\n}\n\nexport function makePosition(col, row) {\n    return `${col}${row}`;\n}\n\nexport function columnIndex(colLetter) {\n    return colLetter.charCodeAt(0) - 65;\n}\n\nexport function columnLetter(colIndex) {\n    return String.fromCharCode(colIndex + 65);\n}","import { TokenType } from './tokenizer';\nimport { ParsingError, NotImplementedError } from './errors';\nimport { Value, Reference, BinaryOp, UnaryOp, Range, FunctionCall } from './expressions';\nimport * as Helpers from './helpers';\n\nexport default class Parser {\n    constructor(tokenizer) {\n        this._tokenizer = tokenizer;\n        this._tokens = null;\n    }\n\n    // cell => empty | '=' expression EOF | number | string\n    parse(text) {\n        const needsParsing = text !== null && text !== undefined && text.constructor === String;\n        if (!needsParsing)\n            return { parsed: new Value(text), references: [] };\n\n        const isFormula = text[0] === '='; // TODO: add test with and without whitespace\n        if (isFormula) {\n            this._tokens = this._tokenizer.tokenize(text);\n            this._tokens.require(TokenType.EQUALS);\n            const parsed = this._parseExpression();\n            this._tokens.require(TokenType.EOF);\n            const references = this._referencesIn(parsed);\n            return { parsed, references };\n        }\n\n        // number\n        if (text.match(/^[+-]?\\d+(?:\\.\\d+)?$/))\n            return { parsed: new Value(parseFloat(text)), references: [] };\n\n        // string\n        return { parsed: new Value(text), references: [] };\n    }\n\n    // expression => term\n    _parseExpression() {\n        return this._parseTerm();\n    }\n\n    // term => factor (('+'|'-') factor)*\n    _parseTerm() {\n        let left = this._parseFactor();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseFactor());\n        }\n        return left;\n    }\n\n    // factor => unary (('*'|'/') unary)*\n    _parseFactor() {\n        let left = this._parseRange();\n        let operation;\n        while ((operation = this._tokens.expect(TokenType.STAR, TokenType.SLASH)) !== null) {\n            left = new BinaryOp(left, operation.value, this._parseRange());\n        }\n        return left;\n    }\n\n    // range => unary (':' unary)*\n    _parseRange() {\n        // TODO: Make ranges first-class\n        return this._parseUnary();\n    }\n\n    // unary => ('+'|'-') unary | call\n    _parseUnary() {\n        const operation = this._tokens.expect(TokenType.PLUS, TokenType.MINUS);\n        return operation !== null\n            ? new UnaryOp(operation.value, this._parseUnary())\n            : this._parseValue();\n    }\n\n    // value => number | string | rangeReference | reference | parenthesized | functionCall\n    _parseValue() {\n        if (this._tokens.expect(TokenType.LPAREN))\n            return this._finishParenthesized();\n\n        const number = this._tokens.expect(TokenType.NUMBER)\n        if (number !== null)\n            return new Value(parseFloat(number.value));\n\n        const string = this._tokens.expect(TokenType.STRING);\n        if (string !== null)\n            return this._parseString(string);\n\n\n        const identifier = this._tokens.expect(TokenType.IDENTIFIER);\n        if (identifier !== null) {\n            if (this._tokens.expect(TokenType.COLON))\n                return this._finishRangeReference(identifier);\n\n            if (this._tokens.expect(TokenType.LPAREN))\n                return this._finishFunctionCall(identifier);\n\n            return this._parseReference(identifier.value);\n        }\n        throw new ParsingError(`Unexpected ${this._tokens.peek().type.description}, expected an expression or value`)\n    }\n\n    // parenthesized => '(' expression ')'\n    _finishParenthesized() {\n        const contents = this._parseExpression();\n        this._tokens.require(TokenType.RPAREN);\n        return contents;\n    }\n\n    _parseString(string) {\n        const withoutQuotes = string.value.substring(1, string.value.length - 1);\n        const escapedString = withoutQuotes.replace(/\\\\(.)/g, '$1'); // TODO: check escaped characters are escapable\n        return new Value(escapedString);\n    }\n\n    // rangeReference => IDENTIFIER ':' IDENTIFIER\n    _finishRangeReference(start) {\n        // start identifier and : are already parsed\n        const end = this._tokens.require(TokenType.IDENTIFIER);\n        const from = this._parseReference(start.value);\n        const to = this._parseReference(end.value);\n        return new Range(from, to);\n    }\n\n    // functionCall => IDENTIFIER ('(' arguments ')')*\n    _finishFunctionCall(identifier) {\n        // TODO: Test or remove nested function calls such as FOO()()\n        // Or check for function return types at runtime?\n\n        const args = this._parseArguments();\n        this._tokens.expect(TokenType.RPAREN);\n        return new FunctionCall(identifier.value, args);\n    }\n\n    // reference => [A-Za-z]+\\d+\n    _parseReference(reference) {\n        const position = Helpers.parsePosition(reference);\n        if (position === null)\n            throw new ParsingError(`Invalid format of cell reference: ${reference}`);\n        return new Reference(position.col, position.row);\n    }\n\n    // arguments => (expression (',' expression)*)?\n    _parseArguments() {\n        const args = [];\n        while (this._tokens.peek().type !== TokenType.RPAREN) {\n            if (args.length != 0)\n                this._tokens.require(TokenType.COMMA);\n            args.push(this._parseExpression());\n        }\n        return args;\n    }\n\n    _referencesIn(expression) {\n        switch (expression.constructor) {\n            case Value:\n                return [];\n            case Reference:\n                return [Helpers.makePosition(expression.col, expression.row)];\n            case UnaryOp:\n                return this._referencesIn(expression.value);\n            case BinaryOp:\n                return [...this._referencesIn(expression.left), ...this._referencesIn(expression.right)];\n            case FunctionCall:\n                return expression.args.flatMap(arg => this._referencesIn(arg));\n            case Range:\n                return Helpers.positionsInRange(expression.from, expression.to)\n                    .map(pos => Helpers.makePosition(pos.col, pos.row));\n            default:\n                throw new NotImplementedError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n}","import { Value, Reference, BinaryOp, FunctionCall, Range, UnaryOp } from './expressions';\nimport { RuntimeError, ParsingError, CircularReferenceError, ReferencedCellError, NotImplementedError, RangeReferenceNotAllowedError, FunctionEvaluationError } from './errors';\nimport * as Helpers from './helpers';\n\nclass CircularRefInternal extends Error {\n    constructor(position, circlePositions) { super(); this.position = position; this.circlePositions = circlePositions; }\n}\n\nexport default class Evaluator {\n    constructor() {\n        this.visitedCellStack = [];\n    }\n\n    evaluateCellAt(position, expression, environment) {\n        if (this.visitedCellStack.includes(position))\n            throw new CircularRefInternal(position, [...this.visitedCellStack, position]);\n\n        this.visitedCellStack.push(position);\n        try {\n            const result = this._evaluateCell(expression, environment);\n            this.visitedCellStack.pop();\n            return result;\n        } catch (ex) {\n            this.visitedCellStack.pop()\n            // Normal errors propagate as usual, but CircularRefInternal is used\n            // only to propagate the exception to the originating cell internally\n            // (so it doesn't get reported just as an error in a referenced cell).\n            // Once the CircularRefInternal reaches back to the originating cell,\n            // we turn it into a normal CircularReferenceError.\n            if (ex instanceof CircularRefInternal && ex.position === position) {\n                throw new CircularReferenceError(ex.circlePositions);\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    evaluateQuery(expression, environment) {\n        return this._evaluateCell(expression, environment);\n    }\n\n    _evaluateCell(expression, environment) {\n        switch (expression.constructor) {\n            case Value:\n                return expression.value;\n            case Reference:\n                return this._evaluateReference(Helpers.makePosition(expression.col, expression.row), environment);\n            case UnaryOp:\n                return this._evaluateUnary(expression.op, expression.value, environment);\n            case BinaryOp:\n                return this._evaluateBinary(expression.left, expression.op, expression.right, environment);\n            case FunctionCall:\n                return this._evaluateFunction(expression.functionName, expression.args, environment);\n            case Range:\n                throw new RangeReferenceNotAllowedError();\n            default:\n                throw new NotImplementedError(`Unknown expression type: ${typeof expression}`);\n        }\n    }\n\n    _evaluateReference(position, environment) {\n        try {\n            return environment.getValue(position);\n        } catch (ex) {\n            if (ex instanceof ParsingError || ex instanceof RuntimeError)\n                throw new ReferencedCellError(position);\n            else throw ex;\n        }\n    }\n\n    _evaluateExpression(value, environment) {\n        switch (value.constructor) {\n            case Range: return this._evaluateRange(value.from, value.to, environment);\n            default: return this._evaluateCell(value, environment);\n        }\n    }\n\n    _evaluateUnary(op, expression, environment) {\n        const value = this._evaluateCell(expression, environment);\n        switch (op) {\n            case '+': return value;\n            case '-': return -value;\n            default: throw new NotImplementedError(`Unknown unary operator: '${op}'`);\n        }\n    }\n\n    _evaluateBinary(left, op, right, environment) {\n        const leftValue = this._evaluateCell(left, environment);\n        const rightValue = this._evaluateCell(right, environment);\n        switch (op) {\n            case '+': return leftValue + rightValue;\n            case '-': return leftValue - rightValue;\n            case '*': return leftValue * rightValue;\n            case '/': return leftValue / rightValue;\n            default: throw new NotImplementedError(`Unknown binary operator: '${op}'`);\n        }\n    }\n\n    _evaluateFunction(functionName, args, environment) {\n        let func = environment.getFunction(functionName);\n        func = func instanceof Function ? { isMacro: false, function: func } : func;\n        return (func.isMacro === true) ?\n            this._evaluateMacro(functionName, func, args, environment) :\n            this._evaluateSpreadsheetFunction(functionName, func, args, environment);\n    }\n\n    _evaluateSpreadsheetFunction(functionName, func, args, environment) {\n        const argumentValues = args.map(arg => this._evaluateExpression(arg, environment));\n        try {\n            return func.function(...argumentValues);\n        } catch (ex) {\n            throw new FunctionEvaluationError(functionName, ex);\n        }\n    }\n\n    _evaluateMacro(macroName, macro, args, environment) {\n        const argsLazyValues = args.map(arg => () => this._evaluateExpression(arg, environment));\n        try {\n            return macro.function(...argsLazyValues);\n        } catch (ex) {\n            throw new FunctionEvaluationError(macroName, ex);\n        }\n    }\n\n    _evaluateRange(from, to, environment) {\n        return Helpers.positionsInRange(from, to)\n            .map(pos => Helpers.makePosition(pos.col, pos.row))\n            .map(pos => this._evaluateReference(pos, environment));\n    }\n}\n","export default class ReferencesMap {\n    constructor() {\n        this._referencesFrom = new Map();\n        this._referencesTo = new Map();\n    }\n\n    addReferences(positionFrom, referencesTo) {\n        if (!this._referencesFrom.has(positionFrom))\n            this._referencesFrom.set(positionFrom, new Set(referencesTo));\n\n        for (let referenceTo of referencesTo) {\n            this._referencesFrom.get(positionFrom).add(referenceTo);\n\n            if (!this._referencesTo.has(referenceTo))\n                this._referencesTo.set(referenceTo, new Set());\n            this._referencesTo.get(referenceTo).add(positionFrom);\n        }\n    }\n\n    removeReferencesFrom(position) {\n        // TODO: test this code works properly\n        const targetNodes = this._referencesFrom.get(position);\n        if (targetNodes) {\n            for (let target of targetNodes)\n                this._referencesTo.get(target).delete(position);\n            this._referencesFrom.delete(position);\n        }\n    }\n\n    cellsDependingOn(position) {\n        const visited = new Set();\n        const toVisitStack = [position];\n        while (toVisitStack.length > 0) {\n            const current = toVisitStack.pop();\n            visited.add(current);\n            const neighbors = this._referencesTo.has(current) ?\n                [...this._referencesTo.get(current)].filter(n => !visited.has(n)) : [];\n            const newNeighbors = neighbors.filter(n => !visited.has(n));\n            toVisitStack.push(...newNeighbors);\n        }\n        return visited;\n    }\n}\n","import { Tokenizer } from './tokenizer';\nimport Parser from './parser';\nimport Evaluator from './evaluator';\nimport { UnknownFunctionError } from './errors';\nimport ReferencesMap from './referencesMap';\n\nexport class Environment {\n    constructor(cells, functions, cellsChangedListener) {\n        this.cells = cells;\n        this.functions = functions;\n        this.onCellsChanged = cellsChangedListener;\n        this._parser = new Parser(new Tokenizer());\n        this._evaluator = new Evaluator();\n\n        this._expressionsCache = new Map(); // { position => expression tree (AST) }\n        this._valuesCache = new Map(); // { position => value; }\n        this._referencesMap = new ReferencesMap();\n    }\n\n    getText(position) {\n        return this.cells.has(position) ? this.cells.get(position).toString() : \"\";\n    }\n\n    setText(position, value) {\n        this.cells.set(position, value);\n\n        const affectedCells = this._referencesMap.cellsDependingOn(position);\n        for (let pos of affectedCells)\n            this._valuesCache.delete(pos);\n\n        this._expressionsCache.delete(position);\n        this._referencesMap.removeReferencesFrom(position);\n\n        this.onCellsChanged([...affectedCells]); // TODO: should this remain a Set?\n    }\n\n    getExpression(position) {\n        if (this._expressionsCache.has(position))\n            return this._expressionsCache.get(position);\n\n        const text = this.cells.has(position) ? this.cells.get(position) : null;\n        const { parsed, references } = this._parser.parse(text);\n        this._expressionsCache.set(position, parsed);\n        this._referencesMap.addReferences(position, references);\n        return parsed;\n    }\n\n    getValue(position) {\n        if (this._valuesCache.has(position))\n            return this._valuesCache.get(position);\n\n        const result = this._evaluator.evaluateCellAt(position, this.getExpression(position), this);\n        this._valuesCache.set(position, result);\n        return result;\n    }\n\n    evaluateQuery(expression) {\n        const { parsed, _ } = this._parser.parse(expression);\n        return this._evaluator.evaluateQuery(parsed, this);\n    }\n\n    getFunction(name) {\n        if (!this.functions.has(name))\n            throw new UnknownFunctionError(name);\n        return this.functions.get(name);\n    }\n}","import { Environment } from './environment';\nimport * as Helpers from './helpers';\nexport { Helpers };\nexport * from './errors';\n\nexport class Spreadsheet {\n    constructor(cells = new Map(), functions = new Map(), onCellsChanged = (() => { })) {\n        this.cells = cells instanceof Map ? cells : new Map(Object.entries(cells));\n        this.functions = functions instanceof Map ? functions : new Map(Object.entries(functions));\n        this._environment = new Environment(this.cells, this.functions, onCellsChanged);\n    }\n\n    text(position) {\n        return this._environment.getText(position);\n    }\n\n    set(position, text) {\n        this._environment.setText(position, text);\n    }\n\n    value(position) {\n        return this._environment.getValue(position);\n    }\n\n    query(expression) {\n        return this._environment.evaluateQuery(expression);\n    }\n}"],"names":["NotImplementedError","Error","[object Object]","message","super","this","SpreadsheetError","ParsingError","RuntimeError","ReferencedCellError","cell","CircularReferenceError","cells","join","FunctionEvaluationError","functionName","error","RangeReferenceNotAllowedError","UnknownFunctionError","TokenStream","tokens","_tokens","_currentPos","types","token","peek","includes","type","expect","description","map","sym","TokenType","Object","freeze","EOF","Symbol","WHITESPACE","PLUS","MINUS","STAR","SLASH","LPAREN","RPAREN","COLON","EQUALS","COMMA","NUMBER","STRING","IDENTIFIER","Tokenizer","_rules","pattern","_operators"," ","\t","\r","\n","+","-","*","/","(",")","=",":",",","text","remaining","length","_nextToken","push","slice","value","filter","firstChar","operator","undefined","rule","match","Expression","Value","constructor","String","Reference","col","row","BinaryOp","left","op","right","UnaryOp","FunctionCall","args","Range","from","to","positionsInRange","positions","_range","columnIndex","columnLetter","Array","_","i","parsePosition","position","positionParts","parseInt","makePosition","colLetter","charCodeAt","colIndex","fromCharCode","Parser","tokenizer","_tokenizer","parsed","references","tokenize","require","_parseExpression","_referencesIn","parseFloat","_parseTerm","operation","_parseFactor","_parseRange","_parseUnary","_parseValue","_finishParenthesized","number","string","_parseString","identifier","_finishRangeReference","_finishFunctionCall","_parseReference","contents","escapedString","substring","replace","start","end","_parseArguments","reference","Helpers.parsePosition","expression","Helpers.makePosition","flatMap","arg","Helpers.positionsInRange","pos","CircularRefInternal","circlePositions","Evaluator","visitedCellStack","environment","result","_evaluateCell","pop","ex","_evaluateReference","_evaluateUnary","_evaluateBinary","_evaluateFunction","getValue","_evaluateRange","leftValue","rightValue","func","getFunction","Function","isMacro","function","_evaluateMacro","_evaluateSpreadsheetFunction","argumentValues","_evaluateExpression","macroName","macro","argsLazyValues","ReferencesMap","_referencesFrom","Map","_referencesTo","positionFrom","referencesTo","has","set","Set","referenceTo","get","add","targetNodes","target","delete","visited","toVisitStack","current","newNeighbors","n","Environment","functions","cellsChangedListener","onCellsChanged","_parser","_evaluator","_expressionsCache","_valuesCache","_referencesMap","toString","affectedCells","cellsDependingOn","removeReferencesFrom","parse","addReferences","evaluateCellAt","getExpression","evaluateQuery","name","Spreadsheet","entries","_environment","getText","setText"],"mappings":"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"}